{"ast":null,"code":"var _jsxFileName = \"/Users/vinaymoolya/Desktop/projects/medicineai/src/chatbot/ActionProvider.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ActionProvider = ({\n  createChatBotMessage,\n  setState,\n  children\n}) => {\n  _s();\n  const [medicines, setMedicines] = useState({});\n  const [med, setMed] = useState(\"\");\n  const querysymptom = async symptom => {\n    console.log(\"Sending the Symptom to the server\", symptom);\n    try {\n      const result = await axios.post(\"http://127.0.0.1:5000/data/\", {\n        payload: symptom\n      });\n      setMedicines(result.data);\n      console.log(\"Recieved Response :: \", result.data[\"Medicine_Recommendation\"].length);\n      message = createChatBotMessage(`You have been diagnosed for ${result.data[\"Disease\"]} !`, {\n        withAvatar: true,\n        delay: 500\n      });\n      updateState(message, \"default\");\n      message = createChatBotMessage(`Below listed are some of the recommended medicines..`, {\n        withAvatar: true,\n        delay: 500\n      });\n      updateState(message, \"default\");\n      result.data[\"Medicine_Recommendation\"].map((med, i) => {\n        message = createChatBotMessage(`${i}. ${med}`, {\n          delay: 500\n        });\n        updateState(message, \"default\");\n      });\n      message = createChatBotMessage(\"Enter the id of the Medicine That you would like to query about ?\", {\n        withAvatar: true,\n        delay: 500\n      });\n      updateState(message, \"medid\");\n    } catch (e) {\n      console.log(\"Error in Retrieving from Flask server....\");\n      console.log(e);\n    }\n  };\n  const querymedication = medid => {\n    console.log(\"You have chosen the option :: \", medid);\n    console.log(\"Medicine Chosen :: \", medicines.Medicine_Recommendation.at(medid));\n    setMed(medicines.Medicine_Recommendation.at(medid));\n    message = createChatBotMessage(`Please Type in your query for the Chosen Medicine(${med}) !`, {\n      withAvatar: true,\n      delay: 500\n    });\n    updateState(message, \"medquery\");\n  };\n  const updateState = (message, checker) => {\n    setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, message],\n      checker\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: React.Children.map(children, child => {\n      return /*#__PURE__*/React.cloneElement(child, {\n        actions: {\n          querysymptom,\n          querymedication\n        }\n      });\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(ActionProvider, \"KcSmwe3gkdMyS7uaqe3qHhfQbkI=\");\n_c = ActionProvider;\nexport default ActionProvider;\nvar _c;\n$RefreshReg$(_c, \"ActionProvider\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","ActionProvider","createChatBotMessage","setState","children","_s","medicines","setMedicines","med","setMed","querysymptom","symptom","console","log","result","post","payload","data","length","message","withAvatar","delay","updateState","map","i","e","querymedication","medid","Medicine_Recommendation","at","checker","prev","messages","Children","child","cloneElement","actions","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vinaymoolya/Desktop/projects/medicineai/src/chatbot/ActionProvider.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nconst ActionProvider = ({ createChatBotMessage, setState, children }) => {\n  const [medicines, setMedicines] = useState({});\n  const [med, setMed] = useState(\"\");\n  const querysymptom = async (symptom) => {\n    console.log(\"Sending the Symptom to the server\", symptom);\n    \n    try {\n      const result = await axios.post(\"http://127.0.0.1:5000/data/\", {\n        payload: symptom,\n      });\n      setMedicines(result.data);\n      console.log(\n        \"Recieved Response :: \",\n        result.data[\"Medicine_Recommendation\"].length\n      );\n\n      message = createChatBotMessage(\n        `You have been diagnosed for ${result.data[\"Disease\"]} !`,\n        { withAvatar: true, delay: 500 }\n      );\n      updateState(message, \"default\");\n\n      message = createChatBotMessage(\n        `Below listed are some of the recommended medicines..`,\n        { withAvatar: true, delay: 500 }\n      );\n      updateState(message, \"default\");\n\n      result.data[\"Medicine_Recommendation\"].map((med, i) => {\n        message = createChatBotMessage(`${i}. ${med}`, { delay: 500 });\n        updateState(message, \"default\");\n      });\n\n      message = createChatBotMessage(\n        \"Enter the id of the Medicine That you would like to query about ?\",\n        { withAvatar: true, delay: 500 }\n      );\n      updateState(message, \"medid\");\n    } catch (e) {\n      console.log(\"Error in Retrieving from Flask server....\");\n      console.log(e);\n    }\n  };\n\n  const querymedication = (medid) => {\n    console.log(\"You have chosen the option :: \", medid);\n    console.log(\n      \"Medicine Chosen :: \",\n      medicines.Medicine_Recommendation.at(medid)\n    );\n    setMed(medicines.Medicine_Recommendation.at(medid));\n\n    message = createChatBotMessage(\n      `Please Type in your query for the Chosen Medicine(${med}) !`,\n      { withAvatar: true, delay: 500 }\n    );\n    updateState(message, \"medquery\");\n  };\n  const updateState = (message, checker) => {\n    setState((prev) => ({\n      ...prev,\n      messages: [...prev.messages, message],\n      checker,\n    }));\n  };\n  return (\n    <div>\n      {React.Children.map(children, (child) => {\n        return React.cloneElement(child, {\n          actions: { querysymptom, querymedication },\n        });\n      })}\n    </div>\n  );\n};\n\nexport default ActionProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}