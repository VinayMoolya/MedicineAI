{"ast":null,"code":"var tokensLib = require('./tokensLib');\nvar cosineSimilarity = {\n  // Convert strings into arrays (Tokenize, toLowerCase) //\n  getTokens: function (str) {\n    return tokensLib.tokenize(str).filter(function (val) {\n      if (!isNaN(val)) return false;else return true;\n    }).map(word => {\n      return word.toLowerCase();\n    });\n  },\n  // Find Common words Frequency //\n  computeFrequency: function (arr, commons) {\n    return commons.map(word => {\n      return arr.reduce((f, element) => {\n        if (element == word) return f += 1;else return f += 0;\n      }, 0);\n    });\n  },\n  // Calculate Vector A.B //\n  computeVectorAB: function (v1, v2) {\n    return v1.reduce((sum, f, index) => {\n      return sum += f * v2[index];\n    }, 0);\n  },\n  // Calculate ||a|| and ||b|| //\n  absVector: function (v) {\n    return Math.sqrt(v.reduce((sum, f) => {\n      return sum += f * f;\n    }, 0));\n  },\n  // Cosine Similarity //\n  similarity: function (vAB, a, b) {\n    return vAB / (a * b);\n  }\n};\nmodule.exports = cosineSimilarity;","map":{"version":3,"names":["tokensLib","require","cosineSimilarity","getTokens","str","tokenize","filter","val","isNaN","map","word","toLowerCase","computeFrequency","arr","commons","reduce","f","element","computeVectorAB","v1","v2","sum","index","absVector","v","Math","sqrt","similarity","vAB","a","b","module","exports"],"sources":["/Users/vinaymoolya/Desktop/projects/medicineai/node_modules/string-cosine-similarity/lib/cosineLib.js"],"sourcesContent":["var tokensLib = require('./tokensLib');\r\n\r\nvar cosineSimilarity = {\r\n\t// Convert strings into arrays (Tokenize, toLowerCase) //\r\n\tgetTokens: function (str) {\r\n\t\treturn\ttokensLib\r\n\t\t\t.tokenize(str)\r\n\t\t\t.filter(function (val) {\r\n\t\t\t\tif(!isNaN(val))\r\n\t\t\t\t\treturn false;\r\n\t\t\t\telse\r\n\t\t\t\t\treturn true;\r\n\t\t\t})\r\n\t\t\t.map((word) => {\r\n\t\t\t\treturn word.toLowerCase();\r\n\t\t\t});\r\n\t},\r\n\r\n\t// Find Common words Frequency //\r\n\tcomputeFrequency: function (arr,commons) {\r\n\t\treturn commons.map((word) => {\r\n\t\t\treturn arr.reduce((f,element) => {\r\n\t\t\t\tif (element == word)\r\n\t\t\t\t\treturn f += 1;\r\n\t\t\t\telse \r\n\t\t\t\t\treturn f += 0;\r\n\t\t\t},0)\r\n\t\t})\r\n\t},\r\n\r\n\t// Calculate Vector A.B //\r\n\tcomputeVectorAB: function (v1,v2) {\r\n\t\treturn v1.reduce((sum,f,index) => {\r\n\t\t\t\treturn sum += (f*v2[index]);\r\n\t\t\t},0)\r\n\t},\r\n\r\n\t// Calculate ||a|| and ||b|| //\r\n\tabsVector: function (v) {\r\n\t\treturn Math.sqrt(v.reduce((sum,f) => {\r\n\t\t\t\treturn sum += (f*f);\r\n\t\t\t},0));\r\n\t},\r\n\r\n\t// Cosine Similarity //\r\n\tsimilarity: function(vAB,a,b){\r\n\t\treturn (vAB / (a*b));\r\n\t}\r\n}\r\n\r\nmodule.exports = cosineSimilarity\r\n\r\n"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAa,CAAC;AAEtC,IAAIC,gBAAgB,GAAG;EACtB;EACAC,SAAS,EAAE,SAAAA,CAAUC,GAAG,EAAE;IACzB,OAAOJ,SAAS,CACdK,QAAQ,CAACD,GAAG,CAAC,CACbE,MAAM,CAAC,UAAUC,GAAG,EAAE;MACtB,IAAG,CAACC,KAAK,CAACD,GAAG,CAAC,EACb,OAAO,KAAK,CAAC,KAEb,OAAO,IAAI;IACb,CAAC,CAAC,CACDE,GAAG,CAAEC,IAAI,IAAK;MACd,OAAOA,IAAI,CAACC,WAAW,CAAC,CAAC;IAC1B,CAAC,CAAC;EACJ,CAAC;EAED;EACAC,gBAAgB,EAAE,SAAAA,CAAUC,GAAG,EAACC,OAAO,EAAE;IACxC,OAAOA,OAAO,CAACL,GAAG,CAAEC,IAAI,IAAK;MAC5B,OAAOG,GAAG,CAACE,MAAM,CAAC,CAACC,CAAC,EAACC,OAAO,KAAK;QAChC,IAAIA,OAAO,IAAIP,IAAI,EAClB,OAAOM,CAAC,IAAI,CAAC,CAAC,KAEd,OAAOA,CAAC,IAAI,CAAC;MACf,CAAC,EAAC,CAAC,CAAC;IACL,CAAC,CAAC;EACH,CAAC;EAED;EACAE,eAAe,EAAE,SAAAA,CAAUC,EAAE,EAACC,EAAE,EAAE;IACjC,OAAOD,EAAE,CAACJ,MAAM,CAAC,CAACM,GAAG,EAACL,CAAC,EAACM,KAAK,KAAK;MAChC,OAAOD,GAAG,IAAKL,CAAC,GAACI,EAAE,CAACE,KAAK,CAAE;IAC5B,CAAC,EAAC,CAAC,CAAC;EACN,CAAC;EAED;EACAC,SAAS,EAAE,SAAAA,CAAUC,CAAC,EAAE;IACvB,OAAOC,IAAI,CAACC,IAAI,CAACF,CAAC,CAACT,MAAM,CAAC,CAACM,GAAG,EAACL,CAAC,KAAK;MACnC,OAAOK,GAAG,IAAKL,CAAC,GAACA,CAAE;IACpB,CAAC,EAAC,CAAC,CAAC,CAAC;EACP,CAAC;EAED;EACAW,UAAU,EAAE,SAAAA,CAASC,GAAG,EAACC,CAAC,EAACC,CAAC,EAAC;IAC5B,OAAQF,GAAG,IAAIC,CAAC,GAACC,CAAC,CAAC;EACpB;AACD,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAG9B,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}