{"ast":null,"code":"var _jsxFileName = \"/Users/vinaymoolya/Desktop/projects/medicineai/src/chatbot/ActionProvider.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport questions from \"../questions.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ActionProvider = ({\n  createChatBotMessage,\n  setState,\n  children\n}) => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [medicines, setMedicines] = useState({});\n  const [med, setMed] = useState(\"\");\n  const [ques, setQues] = useState([]);\n  const [symp, setSymp] = useState(\"\");\n  const [qno, setQno] = useState(0);\n  const [llmresponse, setLLMResponse] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n  const [msgHistory, setMsgHistory] = useState([]);\n  let message;\n  let similarity = require(\"string-cosine-similarity\");\n  const {\n    GoogleGenerativeAI,\n    HarmCategory,\n    HarmBlockThreshold\n  } = require(\"@google/generative-ai\");\n  const MODEL_NAME = \"gemini-1.0-pro\";\n  const API_KEY = \"AIzaSyDYGYlXJHj40gXGvmGRsK6cpfmkmpBhviY\";\n  function LLMDiagnosisEnds(message) {\n    return message.startsWith(\"Disease :\");\n  }\n  function runChat() {\n    _s();\n    const genAI = new GoogleGenerativeAI(API_KEY);\n    const model = genAI.getGenerativeModel({\n      model: MODEL_NAME\n    });\n    const generationConfig = {\n      temperature: 0.95,\n      topK: 1,\n      topP: 1,\n      maxOutputTokens: 2048\n    };\n    const safetySettings = [{\n      category: HarmCategory.HARM_CATEGORY_HARASSMENT,\n      threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE\n    }, {\n      category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,\n      threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE\n    }, {\n      category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,\n      threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE\n    }, {\n      category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\n      threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE\n    }];\n    try {\n      const chat = model.startChat({\n        generationConfig,\n        safetySettings,\n        history: [{\n          role: \"user\",\n          parts: [{\n            text: 'Take a role of Disease Diagnoser , You have the ability to diagnose a disease based on the symptoms given as an input. For better diagnosis you may ask questions one by one in a conversational manner. Ensure that you don\\'t ask more than 4 questions for diagnosis and ask one question at a time. Ask one question at a time without the question tag.Finally respond with result in the format \"Disease : \" {diagnosed disease}.Diseases that you can diagnose are : Dry Cough , Cough with mucus , Acute Sore throat , Common Cold, Fever , Pain relief , Depression , Insomnia , Indigestion , Acne , skin infections , Irritable bowel syndrome , Burns , Chronic Obstructive Pulmonary Disease , Neuropathic pain , Osteoporosis , Nutrition Defeciency , Fungal Infections , Asthma , Wound infections . Input : Severe cough'\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Do you produce mucus while you cough?\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"yes\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Do you have sore throat, hoarseness, or difficulty swallowing?\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"yes\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Do you have fever, chills, or headache?\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"no\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Disease : Acute Sore throat\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"skin rashes and burns\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Are the skin rashes itchy, red, and raised?\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"yes\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Do you have any open wounds or blisters on your skin?\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"yes\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Disease : Skin infections\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"hard stool\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Is your stool hard and dry, or is it difficult to pass?\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"yes\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Disease : Constipation\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"I feel weak and have bone pain\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Have you experienced any recent falls or injuries?\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"yes\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Disease : Osteoporosis\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"difficulty in breathing\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Do you have a persistent cough, wheezing, or shortness of breath?\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"yes\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Disease : Asthma\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"Cough\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Is your cough dry or do you produce mucus?\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"dry\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Do you have any other symptoms, such as a sore throat, runny nose, or headache?\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"no\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Disease : Dry Cough\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"stomach pain\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Is the pain located in your upper abdomen, lower abdomen, or both?\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"upper\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Do you experience the pain after eating certain foods or drinks?\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"no\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Disease : Gastritis\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"Depression , nerve pain\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Do you feel sadness, hopelessness, and loss of interest in activities that you once enjoyed?\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"no\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Disease : Neuropathic pain\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"fever\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Do you have a headache, sore throat, or runny nose?\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"runny nose\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Disease : Common Cold\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"Pain\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Is the pain sharp, dull, or burning?\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"sharp\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Disease : Pain relief\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"circular infection\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Is the infection on the skin, respiratory system, or urinary tract?\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"urinary tract\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Disease : Urinary Tract Infection\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"pain in the nail\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Is the pain throbbing, sharp, or aching?\"\n          }]\n        }, {\n          role: \"user\",\n          parts: [{\n            text: \"aching\"\n          }]\n        }, {\n          role: \"model\",\n          parts: [{\n            text: \"Disease : Paronychia\"\n          }]\n        }]\n      });\n      useEffect(() => {});\n      const handleUserInput = input => {\n        setQuery(\"\");\n        sendMessage(input);\n      };\n      sendMessage(query);\n    } catch (error) {\n      console.log(\"Error in the LLM communication part\");\n    }\n    // we need to wait for the response from the user for this qn\n\n    // let count = 1;\n    // while (!LLMDiagnosisEnds(llmresponse) && count < 3) {\n    //   console.log(\"Inside the LLM bot :: \", query);\n    //   if (query.length > 0) {\n    //     let result = await chat.sendMessage(query);\n    //     var res = result.response;\n    //     res = res.text();\n    //     console.log(\"Inside the LLM Response : \", res);\n    //     handleLLMResponse(res);\n    //     //set the response\n    //     setLLMResponse(res);\n    //   }\n    //   count = count + 1;\n    // }\n    // //split the response on colon and take the second part\n    // if (query.length > 0) {\n    //   let dis = res.split(\":\")[1].trim();\n    //   let diagnosed_disease = `${symp} + ${dis}`;\n    //   recommender(diagnosed_disease);\n    // }\n  }\n  _s(runChat, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  const handleLLMResponse = response => {\n    //print the response on the Chat window\n    console.log(\"Inside the Handle LLM response...\");\n    message = createChatBotMessage(`${response}`, {\n      withAvatar: true,\n      delay: 250\n    });\n    updateState(message, \"askllm\");\n  };\n  const userToLLM = message => {\n    console.log(\"Inside the UserToLLM part : \", message);\n    if (message.trim() !== \"\") {\n      setMsgHistory(prevMessages => [...prevMessages, {\n        role: \"user\",\n        parts: [{\n          text: message\n        }]\n      }]);\n      setQuery(message);\n    }\n  };\n  function askquestions(quests, symptom) {\n    setQues(quests);\n    setSymp(symptom);\n    console.log(\"Insider ask :: \", quests[qno]);\n    message = createChatBotMessage(`${quests[qno].Qn}`, {\n      withAvatar: true,\n      delay: 250\n    });\n    updateState(message, \"question\");\n  }\n  const handleQuestionResponse = response => {\n    // if the sentiment positive then pass the disease to the server and query else ask next question.\n    let positive_list = [\"yes\", \"yep\", \"yeah\"];\n    function containsAnyWord(string, positive_list) {\n      for (let word of positive_list) {\n        if (string.includes(word)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    if (containsAnyWord(response, positive_list)) {\n      let diagnosed_disease = `${symp} + ${ques[qno].disease}`;\n      console.log(diagnosed_disease);\n      recommender(diagnosed_disease);\n    } else if (qno + 1 < ques.length) {\n      setQno(qno + 1);\n      message = createChatBotMessage(`${ques[qno + 1].Qn}`, {\n        withAvatar: true,\n        delay: 250\n      });\n      updateState(message, \"question\");\n    } else {\n      recommender(symp);\n    }\n  };\n  const recommender = async symptom => {\n    console.log(\"Sending the Symptom to the server\", symptom);\n    try {\n      const result = await axios.post(\"http://127.0.0.1:5000/data/\", {\n        payload: symptom\n      });\n      setMedicines(result.data);\n      console.log(\"Recieved Response :: \", result.data);\n      message = createChatBotMessage(`You have been diagnosed for ${result.data[\"Disease\"]} !`, {\n        withAvatar: true,\n        delay: 500\n      });\n      updateState(message, \"default\");\n      message = createChatBotMessage(`It would be the best if you consult  : ${result.data[\"Department\"]} !`, {\n        withAvatar: true,\n        delay: 500\n      });\n      updateState(message, \"default\");\n      message = createChatBotMessage(`You must be treated with medicines of Therapeutic Class : ${result.data[\"Therapeutic_Class\"]} !`, {\n        withAvatar: true,\n        delay: 500\n      });\n      updateState(message, \"default\");\n      message = createChatBotMessage(`Below listed are some of the recommended medicines..`, {\n        withAvatar: true,\n        delay: 500\n      });\n      updateState(message, \"default\");\n      result.data[\"Medicine_Recommendation\"].map((med, i) => {\n        message = createChatBotMessage(`${i}. ${med}`, {\n          delay: 500\n        });\n        updateState(message, \"default\");\n      });\n\n      // Only ask the id if the number of medicines is > 1\n      if (result.data[\"Medicine_Recommendation\"].length > 1) {\n        message = createChatBotMessage(\"Enter the id of the Medicine That you would like to query about ?\", {\n          withAvatar: true,\n          delay: 500\n        });\n        updateState(message, \"medid\");\n      } else {\n        setMed(result.data[\"Medicine_Recommendation\"][0]);\n        message = createChatBotMessage(`Please Type in your query for the Medicine(${result.data[\"Medicine_Recommendation\"][0]}) !`, {\n          withAvatar: true,\n          delay: 500\n        });\n        updateState(message, \"medquery\");\n      }\n    } catch (e) {\n      console.log(\"Error in Retrieving from Flask server....\");\n      console.log(e);\n    }\n  };\n  const querysymptom = async symptom => {\n    // here we migh have to the diagnosis process ... wherein we will be asking all types of questions.\n    let qclasses = [];\n    questions.map(ques => {\n      qclasses.push(ques.CLASS);\n    });\n    let qcosine = [];\n    qclasses.forEach(txt => {\n      qcosine.push(similarity(txt, symptom));\n    });\n    setQuery(symptom);\n    console.log(\"Cosine :: \", qcosine.indexOf(1));\n\n    //ask questions\n    if (qcosine.indexOf(1) !== -1) {\n      // set the symptom here only\n      askquestions(questions[qcosine.indexOf(1)].questions, symptom);\n    } else {\n      // pass it to the LLM diagnoser\n      message = createChatBotMessage(`Analyzing your symptoms via our specialized LLM !`, {\n        withAvatar: true,\n        delay: 500\n      });\n      updateState(message, \"askllm\");\n      runChat();\n      //   recommender(symptom);\n    }\n\n    // recommender(symptom);\n  };\n  const querymedication = medid => {\n    console.log(\"You have chosen the option :: \", medid);\n    console.log(\"Medicine Chosen :: \", medicines.Medicine_Recommendation.at(medid));\n    setMed(medicines.Medicine_Recommendation.at(medid));\n    message = createChatBotMessage(`Please Type in your query for the Chosen Medicine(${medicines.Medicine_Recommendation.at(medid)}) !`, {\n      withAvatar: true,\n      delay: 500\n    });\n    updateState(message, \"medquery\");\n  };\n  const processquery = async inpquery => {\n    // we will be passing the medicine name and the query to the server ... which will use langchain to create a cypher query and then would return us the result\n    try {\n      const result = await axios.post(\"http://127.0.0.1:5000/medquery/\", {\n        query: inpquery,\n        medicine: med\n      });\n      console.log(\"Result From API :: \", result.data);\n      message = createChatBotMessage(`${result.data.Result}`, {\n        withAvatar: true\n      });\n      updateState(message, \"medquery\");\n    } catch (e) {\n      console.log(\"Problem in querying the medicine \", e);\n    }\n    message = createChatBotMessage(`Any more queries for the Chosen Medicine(${med}) !`, {\n      withAvatar: false,\n      delay: 500\n    });\n    updateState(message, \"medquery\");\n  };\n  const updateState = (message, checker) => {\n    setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, message],\n      checker\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: React.Children.map(children, child => {\n      return /*#__PURE__*/React.cloneElement(child, {\n        actions: {\n          querysymptom,\n          querymedication,\n          processquery,\n          handleQuestionResponse,\n          recommender,\n          userToLLM\n        }\n      });\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 572,\n    columnNumber: 5\n  }, this);\n};\n_s2(ActionProvider, \"/jNx30Qs1Qm6RrfDmAkOoyu2ozQ=\");\n_c = ActionProvider;\nexport default ActionProvider;\nvar _c;\n$RefreshReg$(_c, \"ActionProvider\");","map":{"version":3,"names":["React","useState","axios","questions","jsxDEV","_jsxDEV","ActionProvider","createChatBotMessage","setState","children","_s2","_s","$RefreshSig$","medicines","setMedicines","med","setMed","ques","setQues","symp","setSymp","qno","setQno","llmresponse","setLLMResponse","query","setQuery","msgHistory","setMsgHistory","message","similarity","require","GoogleGenerativeAI","HarmCategory","HarmBlockThreshold","MODEL_NAME","API_KEY","LLMDiagnosisEnds","startsWith","runChat","genAI","model","getGenerativeModel","generationConfig","temperature","topK","topP","maxOutputTokens","safetySettings","category","HARM_CATEGORY_HARASSMENT","threshold","BLOCK_MEDIUM_AND_ABOVE","HARM_CATEGORY_HATE_SPEECH","HARM_CATEGORY_SEXUALLY_EXPLICIT","HARM_CATEGORY_DANGEROUS_CONTENT","chat","startChat","history","role","parts","text","useEffect","handleUserInput","input","sendMessage","error","console","log","handleLLMResponse","response","withAvatar","delay","updateState","userToLLM","trim","prevMessages","askquestions","quests","symptom","Qn","handleQuestionResponse","positive_list","containsAnyWord","string","word","includes","diagnosed_disease","disease","recommender","length","result","post","payload","data","map","i","e","querysymptom","qclasses","push","CLASS","qcosine","forEach","txt","indexOf","querymedication","medid","Medicine_Recommendation","at","processquery","inpquery","medicine","Result","checker","prev","messages","Children","child","cloneElement","actions","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vinaymoolya/Desktop/projects/medicineai/src/chatbot/ActionProvider.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport questions from \"../questions.json\";\n\nconst ActionProvider = ({ createChatBotMessage, setState, children }) => {\n  const [medicines, setMedicines] = useState({});\n  const [med, setMed] = useState(\"\");\n  const [ques, setQues] = useState([]);\n  const [symp, setSymp] = useState(\"\");\n  const [qno, setQno] = useState(0);\n  const [llmresponse, setLLMResponse] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n  const [msgHistory, setMsgHistory] = useState([]);\n  let message;\n  let similarity = require(\"string-cosine-similarity\");\n  const {\n    GoogleGenerativeAI,\n    HarmCategory,\n    HarmBlockThreshold,\n  } = require(\"@google/generative-ai\");\n\n  const MODEL_NAME = \"gemini-1.0-pro\";\n  const API_KEY = \"AIzaSyDYGYlXJHj40gXGvmGRsK6cpfmkmpBhviY\";\n\n  function LLMDiagnosisEnds(message) {\n    return message.startsWith(\"Disease :\");\n  }\n\n  function runChat() {\n    const genAI = new GoogleGenerativeAI(API_KEY);\n    const model = genAI.getGenerativeModel({ model: MODEL_NAME });\n\n    const generationConfig = {\n      temperature: 0.95,\n      topK: 1,\n      topP: 1,\n      maxOutputTokens: 2048,\n    };\n\n    const safetySettings = [\n      {\n        category: HarmCategory.HARM_CATEGORY_HARASSMENT,\n        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n      },\n      {\n        category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,\n        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n      },\n      {\n        category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,\n        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n      },\n      {\n        category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\n        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n      },\n    ];\n\n    try {\n      const chat = model.startChat({\n        generationConfig,\n        safetySettings,\n        history: [\n          {\n            role: \"user\",\n            parts: [\n              {\n                text: 'Take a role of Disease Diagnoser , You have the ability to diagnose a disease based on the symptoms given as an input. For better diagnosis you may ask questions one by one in a conversational manner. Ensure that you don\\'t ask more than 4 questions for diagnosis and ask one question at a time. Ask one question at a time without the question tag.Finally respond with result in the format \"Disease : \" {diagnosed disease}.Diseases that you can diagnose are : Dry Cough , Cough with mucus , Acute Sore throat , Common Cold, Fever , Pain relief , Depression , Insomnia , Indigestion , Acne , skin infections , Irritable bowel syndrome , Burns , Chronic Obstructive Pulmonary Disease , Neuropathic pain , Osteoporosis , Nutrition Defeciency , Fungal Infections , Asthma , Wound infections . Input : Severe cough',\n              },\n            ],\n          },\n          {\n            role: \"model\",\n            parts: [{ text: \"Do you produce mucus while you cough?\" }],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"yes\" }],\n          },\n          {\n            role: \"model\",\n            parts: [\n              {\n                text: \"Do you have sore throat, hoarseness, or difficulty swallowing?\",\n              },\n            ],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"yes\" }],\n          },\n          {\n            role: \"model\",\n            parts: [{ text: \"Do you have fever, chills, or headache?\" }],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"no\" }],\n          },\n          {\n            role: \"model\",\n            parts: [{ text: \"Disease : Acute Sore throat\" }],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"skin rashes and burns\" }],\n          },\n          {\n            role: \"model\",\n            parts: [{ text: \"Are the skin rashes itchy, red, and raised?\" }],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"yes\" }],\n          },\n          {\n            role: \"model\",\n            parts: [\n              { text: \"Do you have any open wounds or blisters on your skin?\" },\n            ],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"yes\" }],\n          },\n          {\n            role: \"model\",\n            parts: [{ text: \"Disease : Skin infections\" }],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"hard stool\" }],\n          },\n          {\n            role: \"model\",\n            parts: [\n              {\n                text: \"Is your stool hard and dry, or is it difficult to pass?\",\n              },\n            ],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"yes\" }],\n          },\n          {\n            role: \"model\",\n            parts: [{ text: \"Disease : Constipation\" }],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"I feel weak and have bone pain\" }],\n          },\n          {\n            role: \"model\",\n            parts: [\n              { text: \"Have you experienced any recent falls or injuries?\" },\n            ],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"yes\" }],\n          },\n          {\n            role: \"model\",\n            parts: [{ text: \"Disease : Osteoporosis\" }],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"difficulty in breathing\" }],\n          },\n          {\n            role: \"model\",\n            parts: [\n              {\n                text: \"Do you have a persistent cough, wheezing, or shortness of breath?\",\n              },\n            ],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"yes\" }],\n          },\n          {\n            role: \"model\",\n            parts: [{ text: \"Disease : Asthma\" }],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"Cough\" }],\n          },\n          {\n            role: \"model\",\n            parts: [{ text: \"Is your cough dry or do you produce mucus?\" }],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"dry\" }],\n          },\n          {\n            role: \"model\",\n            parts: [\n              {\n                text: \"Do you have any other symptoms, such as a sore throat, runny nose, or headache?\",\n              },\n            ],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"no\" }],\n          },\n          {\n            role: \"model\",\n            parts: [{ text: \"Disease : Dry Cough\" }],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"stomach pain\" }],\n          },\n          {\n            role: \"model\",\n            parts: [\n              {\n                text: \"Is the pain located in your upper abdomen, lower abdomen, or both?\",\n              },\n            ],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"upper\" }],\n          },\n          {\n            role: \"model\",\n            parts: [\n              {\n                text: \"Do you experience the pain after eating certain foods or drinks?\",\n              },\n            ],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"no\" }],\n          },\n          {\n            role: \"model\",\n            parts: [{ text: \"Disease : Gastritis\" }],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"Depression , nerve pain\" }],\n          },\n          {\n            role: \"model\",\n            parts: [\n              {\n                text: \"Do you feel sadness, hopelessness, and loss of interest in activities that you once enjoyed?\",\n              },\n            ],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"no\" }],\n          },\n          {\n            role: \"model\",\n            parts: [{ text: \"Disease : Neuropathic pain\" }],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"fever\" }],\n          },\n          {\n            role: \"model\",\n            parts: [\n              { text: \"Do you have a headache, sore throat, or runny nose?\" },\n            ],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"runny nose\" }],\n          },\n          {\n            role: \"model\",\n            parts: [{ text: \"Disease : Common Cold\" }],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"Pain\" }],\n          },\n          {\n            role: \"model\",\n            parts: [{ text: \"Is the pain sharp, dull, or burning?\" }],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"sharp\" }],\n          },\n          {\n            role: \"model\",\n            parts: [{ text: \"Disease : Pain relief\" }],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"circular infection\" }],\n          },\n          {\n            role: \"model\",\n            parts: [\n              {\n                text: \"Is the infection on the skin, respiratory system, or urinary tract?\",\n              },\n            ],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"urinary tract\" }],\n          },\n          {\n            role: \"model\",\n            parts: [{ text: \"Disease : Urinary Tract Infection\" }],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"pain in the nail\" }],\n          },\n          {\n            role: \"model\",\n            parts: [{ text: \"Is the pain throbbing, sharp, or aching?\" }],\n          },\n          {\n            role: \"user\",\n            parts: [{ text: \"aching\" }],\n          },\n          {\n            role: \"model\",\n            parts: [{ text: \"Disease : Paronychia\" }],\n          },\n        ],\n      });\n    useEffect(() => {\n\n    })\n      \n\n      const handleUserInput = (input) => {\n        setQuery(\"\");\n        sendMessage(input);\n      };\n\n      sendMessage(query);\n    } catch (error) {\n      console.log(\"Error in the LLM communication part\");\n    }\n    // we need to wait for the response from the user for this qn\n\n    // let count = 1;\n    // while (!LLMDiagnosisEnds(llmresponse) && count < 3) {\n    //   console.log(\"Inside the LLM bot :: \", query);\n    //   if (query.length > 0) {\n    //     let result = await chat.sendMessage(query);\n    //     var res = result.response;\n    //     res = res.text();\n    //     console.log(\"Inside the LLM Response : \", res);\n    //     handleLLMResponse(res);\n    //     //set the response\n    //     setLLMResponse(res);\n    //   }\n    //   count = count + 1;\n    // }\n    // //split the response on colon and take the second part\n    // if (query.length > 0) {\n    //   let dis = res.split(\":\")[1].trim();\n    //   let diagnosed_disease = `${symp} + ${dis}`;\n    //   recommender(diagnosed_disease);\n    // }\n  }\n\n  const handleLLMResponse = (response) => {\n    //print the response on the Chat window\n    console.log(\"Inside the Handle LLM response...\");\n    message = createChatBotMessage(`${response}`, {\n      withAvatar: true,\n      delay: 250,\n    });\n    updateState(message, \"askllm\");\n  };\n\n  const userToLLM = (message) => {\n    console.log(\"Inside the UserToLLM part : \", message);\n    if (message.trim() !== \"\") {\n      setMsgHistory((prevMessages) => [\n        ...prevMessages,\n        { role: \"user\", parts: [{ text: message }] },\n      ]);\n      setQuery(message);\n    }\n  };\n  function askquestions(quests, symptom) {\n    setQues(quests);\n    setSymp(symptom);\n    console.log(\"Insider ask :: \", quests[qno]);\n    message = createChatBotMessage(`${quests[qno].Qn}`, {\n      withAvatar: true,\n      delay: 250,\n    });\n    updateState(message, \"question\");\n  }\n  const handleQuestionResponse = (response) => {\n    // if the sentiment positive then pass the disease to the server and query else ask next question.\n    let positive_list = [\"yes\", \"yep\", \"yeah\"];\n    function containsAnyWord(string, positive_list) {\n      for (let word of positive_list) {\n        if (string.includes(word)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    if (containsAnyWord(response, positive_list)) {\n      let diagnosed_disease = `${symp} + ${ques[qno].disease}`;\n      console.log(diagnosed_disease);\n      recommender(diagnosed_disease);\n    } else if (qno + 1 < ques.length) {\n      setQno(qno + 1);\n      message = createChatBotMessage(`${ques[qno + 1].Qn}`, {\n        withAvatar: true,\n        delay: 250,\n      });\n      updateState(message, \"question\");\n    } else {\n      recommender(symp);\n    }\n  };\n  const recommender = async (symptom) => {\n    console.log(\"Sending the Symptom to the server\", symptom);\n\n    try {\n      const result = await axios.post(\"http://127.0.0.1:5000/data/\", {\n        payload: symptom,\n      });\n      setMedicines(result.data);\n      console.log(\"Recieved Response :: \", result.data);\n\n      message = createChatBotMessage(\n        `You have been diagnosed for ${result.data[\"Disease\"]} !`,\n        { withAvatar: true, delay: 500 }\n      );\n      updateState(message, \"default\");\n\n      message = createChatBotMessage(\n        `It would be the best if you consult  : ${result.data[\"Department\"]} !`,\n        { withAvatar: true, delay: 500 }\n      );\n      updateState(message, \"default\");\n\n      message = createChatBotMessage(\n        `You must be treated with medicines of Therapeutic Class : ${result.data[\"Therapeutic_Class\"]} !`,\n        { withAvatar: true, delay: 500 }\n      );\n      updateState(message, \"default\");\n\n      message = createChatBotMessage(\n        `Below listed are some of the recommended medicines..`,\n        { withAvatar: true, delay: 500 }\n      );\n      updateState(message, \"default\");\n\n      result.data[\"Medicine_Recommendation\"].map((med, i) => {\n        message = createChatBotMessage(`${i}. ${med}`, { delay: 500 });\n        updateState(message, \"default\");\n      });\n\n      // Only ask the id if the number of medicines is > 1\n      if (result.data[\"Medicine_Recommendation\"].length > 1) {\n        message = createChatBotMessage(\n          \"Enter the id of the Medicine That you would like to query about ?\",\n          { withAvatar: true, delay: 500 }\n        );\n        updateState(message, \"medid\");\n      } else {\n        setMed(result.data[\"Medicine_Recommendation\"][0]);\n\n        message = createChatBotMessage(\n          `Please Type in your query for the Medicine(${result.data[\"Medicine_Recommendation\"][0]}) !`,\n          { withAvatar: true, delay: 500 }\n        );\n        updateState(message, \"medquery\");\n      }\n    } catch (e) {\n      console.log(\"Error in Retrieving from Flask server....\");\n      console.log(e);\n    }\n  };\n  const querysymptom = async (symptom) => {\n    // here we migh have to the diagnosis process ... wherein we will be asking all types of questions.\n    let qclasses = [];\n    questions.map((ques) => {\n      qclasses.push(ques.CLASS);\n    });\n    let qcosine = [];\n    qclasses.forEach((txt) => {\n      qcosine.push(similarity(txt, symptom));\n    });\n    setQuery(symptom);\n    console.log(\"Cosine :: \", qcosine.indexOf(1));\n\n    //ask questions\n    if (qcosine.indexOf(1) !== -1) {\n      // set the symptom here only\n      askquestions(questions[qcosine.indexOf(1)].questions, symptom);\n    } else {\n      // pass it to the LLM diagnoser\n      message = createChatBotMessage(\n        `Analyzing your symptoms via our specialized LLM !`,\n        { withAvatar: true, delay: 500 }\n      );\n      updateState(message, \"askllm\");\n      runChat();\n      //   recommender(symptom);\n    }\n\n    // recommender(symptom);\n  };\n\n  const querymedication = (medid) => {\n    console.log(\"You have chosen the option :: \", medid);\n    console.log(\n      \"Medicine Chosen :: \",\n      medicines.Medicine_Recommendation.at(medid)\n    );\n    setMed(medicines.Medicine_Recommendation.at(medid));\n\n    message = createChatBotMessage(\n      `Please Type in your query for the Chosen Medicine(${medicines.Medicine_Recommendation.at(\n        medid\n      )}) !`,\n      { withAvatar: true, delay: 500 }\n    );\n    updateState(message, \"medquery\");\n  };\n  const processquery = async (inpquery) => {\n    // we will be passing the medicine name and the query to the server ... which will use langchain to create a cypher query and then would return us the result\n    try {\n      const result = await axios.post(\"http://127.0.0.1:5000/medquery/\", {\n        query: inpquery,\n        medicine: med,\n      });\n      console.log(\"Result From API :: \", result.data);\n      message = createChatBotMessage(`${result.data.Result}`, {\n        withAvatar: true,\n      });\n      updateState(message, \"medquery\");\n    } catch (e) {\n      console.log(\"Problem in querying the medicine \", e);\n    }\n\n    message = createChatBotMessage(\n      `Any more queries for the Chosen Medicine(${med}) !`,\n      { withAvatar: false, delay: 500 }\n    );\n    updateState(message, \"medquery\");\n  };\n\n  const updateState = (message, checker) => {\n    setState((prev) => ({\n      ...prev,\n      messages: [...prev.messages, message],\n      checker,\n    }));\n  };\n  return (\n    <div>\n      {React.Children.map(children, (child) => {\n        return React.cloneElement(child, {\n          actions: {\n            querysymptom,\n            querymedication,\n            processquery,\n            handleQuestionResponse,\n            recommender,\n            userToLLM,\n          },\n        });\n      })}\n    </div>\n  );\n};\n\nexport default ActionProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}