{"ast":null,"code":"var _jsxFileName = \"/Users/vinaymoolya/Desktop/projects/medicineai/src/chatbot/ActionProvider.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ActionProvider = ({\n  createChatBotMessage,\n  setState,\n  children\n}) => {\n  _s();\n  const [medicine, setMedicine] = useState({\n    Medicine: []\n  });\n  const querysymptom = async symptom => {\n    console.log(\"Sending the Symptom to the server\", symptom);\n    let message;\n    try {\n      const result = await axios.post(\"http://127.0.0.1:5000/data/\", {\n        payload: symptom\n      });\n      console.log(\"Recieved Response :: \", result.data);\n      setMedicine({\n        Medicine: result.data[\"Medicine_Recommendation\"]\n      });\n      console.log(medicine);\n      message = createChatBotMessage(\"Below listed are some of the recommended medicines..\", {\n        withAvatar: true,\n        delay: 500\n      });\n      updateState(message, \"default\");\n\n      //   medicine[\"Medicine_Recommendation\"].map((med, i) => {\n      //     message = createChatBotMessage(`${i}. ${med}`, { delay: 500 });\n      //     updateState(message, \"default\");\n      //   });\n    } catch (e) {\n      console.log(\"Error in Retrieving from Flask server....\");\n      console.log(e);\n    }\n  };\n  const updateState = (message, checker) => {\n    setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, message],\n      checker\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: React.Children.map(children, child => {\n      return /*#__PURE__*/React.cloneElement(child, {\n        actions: {\n          querysymptom\n        }\n      });\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(ActionProvider, \"Se7FH48yWWFxg3KWd8cHeKHRrD0=\");\n_c = ActionProvider;\nexport default ActionProvider;\nvar _c;\n$RefreshReg$(_c, \"ActionProvider\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","ActionProvider","createChatBotMessage","setState","children","_s","medicine","setMedicine","Medicine","querysymptom","symptom","console","log","message","result","post","payload","data","withAvatar","delay","updateState","e","checker","prev","messages","Children","map","child","cloneElement","actions","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vinaymoolya/Desktop/projects/medicineai/src/chatbot/ActionProvider.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nconst ActionProvider = ({ createChatBotMessage, setState, children }) => {\n  const [medicine, setMedicine] = useState({ Medicine: [] });\n  const querysymptom = async (symptom) => {\n    console.log(\"Sending the Symptom to the server\", symptom);\n    let message;\n    try {\n      const result = await axios.post(\"http://127.0.0.1:5000/data/\", {\n        payload: symptom,\n      });\n      console.log(\"Recieved Response :: \", result.data);\n\n      setMedicine({ Medicine: result.data[\"Medicine_Recommendation\"] });\n      console.log(medicine);\n      message = createChatBotMessage(\n        \"Below listed are some of the recommended medicines..\",\n        { withAvatar: true, delay: 500 }\n      );\n      updateState(message, \"default\");\n\n      //   medicine[\"Medicine_Recommendation\"].map((med, i) => {\n      //     message = createChatBotMessage(`${i}. ${med}`, { delay: 500 });\n      //     updateState(message, \"default\");\n      //   });\n    } catch (e) {\n      console.log(\"Error in Retrieving from Flask server....\");\n      console.log(e);\n    }\n  };\n  const updateState = (message, checker) => {\n    setState((prev) => ({\n      ...prev,\n      messages: [...prev.messages, message],\n      checker,\n    }));\n  };\n  return (\n    <div>\n      {React.Children.map(children, (child) => {\n        return React.cloneElement(child, {\n          actions: { querysymptom },\n        });\n      })}\n    </div>\n  );\n};\n\nexport default ActionProvider;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1B,MAAMC,cAAc,GAAGA,CAAC;EAAEC,oBAAoB;EAAEC,QAAQ;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACvE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC;IAAEW,QAAQ,EAAE;EAAG,CAAC,CAAC;EAC1D,MAAMC,YAAY,GAAG,MAAOC,OAAO,IAAK;IACtCC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEF,OAAO,CAAC;IACzD,IAAIG,OAAO;IACX,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAAC,6BAA6B,EAAE;QAC7DC,OAAO,EAAEN;MACX,CAAC,CAAC;MACFC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEE,MAAM,CAACG,IAAI,CAAC;MAEjDV,WAAW,CAAC;QAAEC,QAAQ,EAAEM,MAAM,CAACG,IAAI,CAAC,yBAAyB;MAAE,CAAC,CAAC;MACjEN,OAAO,CAACC,GAAG,CAACN,QAAQ,CAAC;MACrBO,OAAO,GAAGX,oBAAoB,CAC5B,sDAAsD,EACtD;QAAEgB,UAAU,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAI,CACjC,CAAC;MACDC,WAAW,CAACP,OAAO,EAAE,SAAS,CAAC;;MAE/B;MACA;MACA;MACA;IACF,CAAC,CAAC,OAAOQ,CAAC,EAAE;MACVV,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;MACxDD,OAAO,CAACC,GAAG,CAACS,CAAC,CAAC;IAChB;EACF,CAAC;EACD,MAAMD,WAAW,GAAGA,CAACP,OAAO,EAAES,OAAO,KAAK;IACxCnB,QAAQ,CAAEoB,IAAI,KAAM;MAClB,GAAGA,IAAI;MACPC,QAAQ,EAAE,CAAC,GAAGD,IAAI,CAACC,QAAQ,EAAEX,OAAO,CAAC;MACrCS;IACF,CAAC,CAAC,CAAC;EACL,CAAC;EACD,oBACEtB,OAAA;IAAAI,QAAA,EACGR,KAAK,CAAC6B,QAAQ,CAACC,GAAG,CAACtB,QAAQ,EAAGuB,KAAK,IAAK;MACvC,oBAAO/B,KAAK,CAACgC,YAAY,CAACD,KAAK,EAAE;QAC/BE,OAAO,EAAE;UAAEpB;QAAa;MAC1B,CAAC,CAAC;IACJ,CAAC;EAAC;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC5B,EAAA,CA5CIJ,cAAc;AAAAiC,EAAA,GAAdjC,cAAc;AA8CpB,eAAeA,cAAc;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}