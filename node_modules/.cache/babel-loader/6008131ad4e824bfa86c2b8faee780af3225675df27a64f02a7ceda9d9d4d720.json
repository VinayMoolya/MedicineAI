{"ast":null,"code":"var _jsxFileName = \"/Users/vinaymoolya/Desktop/projects/medicineai/src/chatbot/ActionProvider.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport questions from \"../questions.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ActionProvider = ({\n  createChatBotMessage,\n  setState,\n  children\n}) => {\n  _s();\n  const [medicines, setMedicines] = useState({});\n  const [med, setMed] = useState(\"\");\n  const [ques, setQues] = useState([]);\n  const [symp, setSymp] = useState(\"\");\n  const [qno, setQno] = useState(0);\n  const [llmresponse, setLLMResponse] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n  let message;\n  let similarity = require(\"string-cosine-similarity\");\n  const {\n    GoogleGenerativeAI,\n    HarmCategory,\n    HarmBlockThreshold\n  } = require(\"@google/generative-ai\");\n  const MODEL_NAME = \"gemini-1.0-pro\";\n  const API_KEY = \"AIzaSyDYGYlXJHj40gXGvmGRsK6cpfmkmpBhviY\";\n  function LLMDiagnosisEnds(message) {\n    return message.startsWith(\"Disease :\");\n  }\n  async function runChat() {\n    const genAI = new GoogleGenerativeAI(API_KEY);\n    const model = genAI.getGenerativeModel({\n      model: MODEL_NAME\n    });\n    const generationConfig = {\n      temperature: 0.95,\n      topK: 1,\n      topP: 1,\n      maxOutputTokens: 2048\n    };\n    const safetySettings = [{\n      category: HarmCategory.HARM_CATEGORY_HARASSMENT,\n      threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE\n    }, {\n      category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,\n      threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE\n    }, {\n      category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,\n      threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE\n    }, {\n      category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\n      threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE\n    }];\n    const chat = model.startChat({\n      generationConfig,\n      safetySettings,\n      history: [{\n        role: \"user\",\n        parts: [{\n          text: 'Take a role of Disease Diagnoser , You have the ability to diagnose a disease based on the symptoms given as an input. For better diagnosis you may ask questions one by one in a conversational manner. Ensure that you don\\'t ask more than 4 questions for diagnosis and ask one question at a time. Ask one question at a time without the question tag.Finally respond with result in the format \"Disease : \" {diagnosed disease}.Diseases that you can diagnose are : Dry Cough , Cough with mucus , Acute Sore throat , Common Cold, Fever , Pain relief , Depression , Insomnia , Indigestion , Acne , skin infections , Irritable bowel syndrome , Burns , Chronic Obstructive Pulmonary Disease , Neuropathic pain , Osteoporosis , Nutrition Defeciency , Fungal Infections , Asthma , Wound infections . Input : Severe cough'\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Do you produce mucus while you cough?\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"yes\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Do you have sore throat, hoarseness, or difficulty swallowing?\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"yes\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Do you have fever, chills, or headache?\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"no\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Disease : Acute Sore throat\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"skin rashes and burns\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Are the skin rashes itchy, red, and raised?\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"yes\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Do you have any open wounds or blisters on your skin?\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"yes\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Disease : Skin infections\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"hard stool\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Is your stool hard and dry, or is it difficult to pass?\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"yes\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Disease : Constipation\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"I feel weak and have bone pain\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Have you experienced any recent falls or injuries?\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"yes\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Disease : Osteoporosis\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"difficulty in breathing\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Do you have a persistent cough, wheezing, or shortness of breath?\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"yes\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Disease : Asthma\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"Cough\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Is your cough dry or do you produce mucus?\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"dry\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Do you have any other symptoms, such as a sore throat, runny nose, or headache?\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"no\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Disease : Dry Cough\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"stomach pain\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Is the pain located in your upper abdomen, lower abdomen, or both?\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"upper\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Do you experience the pain after eating certain foods or drinks?\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"no\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Disease : Gastritis\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"Depression , nerve pain\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Do you feel sadness, hopelessness, and loss of interest in activities that you once enjoyed?\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"no\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Disease : Neuropathic pain\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"fever\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Do you have a headache, sore throat, or runny nose?\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"runny nose\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Disease : Common Cold\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"Pain\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Is the pain sharp, dull, or burning?\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"sharp\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Disease : Pain relief\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"circular infection\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Is the infection on the skin, respiratory system, or urinary tract?\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"urinary tract\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Disease : Urinary Tract Infection\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"pain in the nail\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Is the pain throbbing, sharp, or aching?\"\n        }]\n      }, {\n        role: \"user\",\n        parts: [{\n          text: \"aching\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Disease : Paronychia\"\n        }]\n      }]\n    });\n    let count = 1;\n    while (!LLMDiagnosisEnds(llmresponse) || count < 5) {\n      console.log(\"Inside the LLM bot :: \", query);\n      let result = await chat.sendMessage(query);\n      var response = result.response;\n      response = response.text();\n      console.log(\"Inside the LLM Response : \", response);\n      handleLLMResponse(response);\n      //set the response\n      setLLMResponse(response);\n      count = count + 1;\n    }\n    //split the response on colon and take the second part\n    let dis = response.split(\":\")[1].trim();\n    let diagnosed_disease = `${symp} + ${dis}`;\n    recommender(diagnosed_disease);\n  }\n  const handleLLMResponse = response => {\n    //print the response on the Chat window\n    console.log(\"Inside the Handle LLM response...\");\n    message = createChatBotMessage(`${response}`, {\n      withAvatar: true,\n      delay: 250\n    });\n    updateState(message, \"askllm\");\n  };\n  const userToLLM = message => {\n    console.log(\"Inside the UserToLLM part\");\n    setQuery(message);\n  };\n  function askquestions(quests, symptom) {\n    setQues(quests);\n    setSymp(symptom);\n    console.log(\"Insider ask :: \", quests[qno]);\n    message = createChatBotMessage(`${quests[qno].Qn}`, {\n      withAvatar: true,\n      delay: 250\n    });\n    updateState(message, \"question\");\n  }\n  const handleQuestionResponse = response => {\n    // if the sentiment positive then pass the disease to the server and query else ask next question.\n    let positive_list = [\"yes\", \"yep\", \"yeah\"];\n    function containsAnyWord(string, positive_list) {\n      for (let word of positive_list) {\n        if (string.includes(word)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    if (containsAnyWord(response, positive_list)) {\n      let diagnosed_disease = `${symp} + ${ques[qno].disease}`;\n      console.log(diagnosed_disease);\n      recommender(diagnosed_disease);\n    } else if (qno + 1 < ques.length) {\n      setQno(qno + 1);\n      message = createChatBotMessage(`${ques[qno + 1].Qn}`, {\n        withAvatar: true,\n        delay: 250\n      });\n      updateState(message, \"question\");\n    } else {\n      recommender(symp);\n    }\n  };\n  const recommender = async symptom => {\n    console.log(\"Sending the Symptom to the server\", symptom);\n    try {\n      const result = await axios.post(\"http://127.0.0.1:5000/data/\", {\n        payload: symptom\n      });\n      setMedicines(result.data);\n      console.log(\"Recieved Response :: \", result.data);\n      message = createChatBotMessage(`You have been diagnosed for ${result.data[\"Disease\"]} !`, {\n        withAvatar: true,\n        delay: 500\n      });\n      updateState(message, \"default\");\n      message = createChatBotMessage(`It would be the best if you consult  : ${result.data[\"Department\"]} !`, {\n        withAvatar: true,\n        delay: 500\n      });\n      updateState(message, \"default\");\n      message = createChatBotMessage(`You must be treated with medicines of Therapeutic Class : ${result.data[\"Therapeutic_Class\"]} !`, {\n        withAvatar: true,\n        delay: 500\n      });\n      updateState(message, \"default\");\n      message = createChatBotMessage(`Below listed are some of the recommended medicines..`, {\n        withAvatar: true,\n        delay: 500\n      });\n      updateState(message, \"default\");\n      result.data[\"Medicine_Recommendation\"].map((med, i) => {\n        message = createChatBotMessage(`${i}. ${med}`, {\n          delay: 500\n        });\n        updateState(message, \"default\");\n      });\n\n      // Only ask the id if the number of medicines is > 1\n      if (result.data[\"Medicine_Recommendation\"].length > 1) {\n        message = createChatBotMessage(\"Enter the id of the Medicine That you would like to query about ?\", {\n          withAvatar: true,\n          delay: 500\n        });\n        updateState(message, \"medid\");\n      } else {\n        setMed(result.data[\"Medicine_Recommendation\"][0]);\n        message = createChatBotMessage(`Please Type in your query for the Medicine(${result.data[\"Medicine_Recommendation\"][0]}) !`, {\n          withAvatar: true,\n          delay: 500\n        });\n        updateState(message, \"medquery\");\n      }\n    } catch (e) {\n      console.log(\"Error in Retrieving from Flask server....\");\n      console.log(e);\n    }\n  };\n  const querysymptom = async symptom => {\n    // here we migh have to the diagnosis process ... wherein we will be asking all types of questions.\n    let qclasses = [];\n    questions.map(ques => {\n      qclasses.push(ques.CLASS);\n    });\n    let qcosine = [];\n    qclasses.forEach(txt => {\n      qcosine.push(similarity(txt, symptom));\n    });\n    console.log(\"Cosine :: \", qcosine.indexOf(1));\n\n    //ask questions\n    if (qcosine.indexOf(1) !== -1) {\n      // set the symptom here only\n      askquestions(questions[qcosine.indexOf(1)].questions, symptom);\n    } else {\n      // pass it to the LLM diagnoser\n      setSymp(symptom);\n      setQuery(symptom);\n      //   runChat();\n      recommender(symptom);\n    }\n\n    // recommender(symptom);\n  };\n  const querymedication = medid => {\n    console.log(\"You have chosen the option :: \", medid);\n    console.log(\"Medicine Chosen :: \", medicines.Medicine_Recommendation.at(medid));\n    setMed(medicines.Medicine_Recommendation.at(medid));\n    message = createChatBotMessage(`Please Type in your query for the Chosen Medicine(${medicines.Medicine_Recommendation.at(medid)}) !`, {\n      withAvatar: true,\n      delay: 500\n    });\n    updateState(message, \"medquery\");\n  };\n  const processquery = async inpquery => {\n    // we will be passing the medicine name and the query to the server ... which will use langchain to create a cypher query and then would return us the result\n    try {\n      const result = await axios.post(\"http://127.0.0.1:5000/medquery/\", {\n        query: inpquery,\n        medicine: med\n      });\n      console.log(\"Result From API :: \", result.data);\n      message = createChatBotMessage(`${result.data.Result}`, {\n        withAvatar: true\n      });\n      updateState(message, \"medquery\");\n    } catch (e) {\n      console.log(\"Problem in querying the medicine \", e);\n    }\n    message = createChatBotMessage(`Any more queries for the Chosen Medicine(${med}) !`, {\n      withAvatar: false,\n      delay: 500\n    });\n    updateState(message, \"medquery\");\n  };\n  const updateState = (message, checker) => {\n    setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, message],\n      checker\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: React.Children.map(children, child => {\n      return /*#__PURE__*/React.cloneElement(child, {\n        actions: {\n          querysymptom,\n          querymedication,\n          processquery,\n          handleQuestionResponse,\n          recommender,\n          userToLLM\n        }\n      });\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 538,\n    columnNumber: 5\n  }, this);\n};\n_s(ActionProvider, \"i1NCNgiBl3CT1H1WZUdvL2bTdHA=\");\n_c = ActionProvider;\nexport default ActionProvider;\nvar _c;\n$RefreshReg$(_c, \"ActionProvider\");","map":{"version":3,"names":["React","useState","axios","questions","jsxDEV","_jsxDEV","ActionProvider","createChatBotMessage","setState","children","_s","medicines","setMedicines","med","setMed","ques","setQues","symp","setSymp","qno","setQno","llmresponse","setLLMResponse","query","setQuery","message","similarity","require","GoogleGenerativeAI","HarmCategory","HarmBlockThreshold","MODEL_NAME","API_KEY","LLMDiagnosisEnds","startsWith","runChat","genAI","model","getGenerativeModel","generationConfig","temperature","topK","topP","maxOutputTokens","safetySettings","category","HARM_CATEGORY_HARASSMENT","threshold","BLOCK_MEDIUM_AND_ABOVE","HARM_CATEGORY_HATE_SPEECH","HARM_CATEGORY_SEXUALLY_EXPLICIT","HARM_CATEGORY_DANGEROUS_CONTENT","chat","startChat","history","role","parts","text","count","console","log","result","sendMessage","response","handleLLMResponse","dis","split","trim","diagnosed_disease","recommender","withAvatar","delay","updateState","userToLLM","askquestions","quests","symptom","Qn","handleQuestionResponse","positive_list","containsAnyWord","string","word","includes","disease","length","post","payload","data","map","i","e","querysymptom","qclasses","push","CLASS","qcosine","forEach","txt","indexOf","querymedication","medid","Medicine_Recommendation","at","processquery","inpquery","medicine","Result","checker","prev","messages","Children","child","cloneElement","actions","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vinaymoolya/Desktop/projects/medicineai/src/chatbot/ActionProvider.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport questions from \"../questions.json\";\n\nconst ActionProvider = ({ createChatBotMessage, setState, children }) => {\n  const [medicines, setMedicines] = useState({});\n  const [med, setMed] = useState(\"\");\n  const [ques, setQues] = useState([]);\n  const [symp, setSymp] = useState(\"\");\n  const [qno, setQno] = useState(0);\n  const [llmresponse, setLLMResponse] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n  let message;\n  let similarity = require(\"string-cosine-similarity\");\n  const {\n    GoogleGenerativeAI,\n    HarmCategory,\n    HarmBlockThreshold,\n  } = require(\"@google/generative-ai\");\n\n  const MODEL_NAME = \"gemini-1.0-pro\";\n  const API_KEY = \"AIzaSyDYGYlXJHj40gXGvmGRsK6cpfmkmpBhviY\";\n\n  function LLMDiagnosisEnds(message) {\n    return message.startsWith(\"Disease :\");\n  }\n\n  async function runChat() {\n    const genAI = new GoogleGenerativeAI(API_KEY);\n    const model = genAI.getGenerativeModel({ model: MODEL_NAME });\n\n    const generationConfig = {\n      temperature: 0.95,\n      topK: 1,\n      topP: 1,\n      maxOutputTokens: 2048,\n    };\n\n    const safetySettings = [\n      {\n        category: HarmCategory.HARM_CATEGORY_HARASSMENT,\n        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n      },\n      {\n        category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,\n        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n      },\n      {\n        category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,\n        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n      },\n      {\n        category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\n        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n      },\n    ];\n\n    const chat = model.startChat({\n      generationConfig,\n      safetySettings,\n      history: [\n        {\n          role: \"user\",\n          parts: [\n            {\n              text: 'Take a role of Disease Diagnoser , You have the ability to diagnose a disease based on the symptoms given as an input. For better diagnosis you may ask questions one by one in a conversational manner. Ensure that you don\\'t ask more than 4 questions for diagnosis and ask one question at a time. Ask one question at a time without the question tag.Finally respond with result in the format \"Disease : \" {diagnosed disease}.Diseases that you can diagnose are : Dry Cough , Cough with mucus , Acute Sore throat , Common Cold, Fever , Pain relief , Depression , Insomnia , Indigestion , Acne , skin infections , Irritable bowel syndrome , Burns , Chronic Obstructive Pulmonary Disease , Neuropathic pain , Osteoporosis , Nutrition Defeciency , Fungal Infections , Asthma , Wound infections . Input : Severe cough',\n            },\n          ],\n        },\n        {\n          role: \"model\",\n          parts: [{ text: \"Do you produce mucus while you cough?\" }],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"yes\" }],\n        },\n        {\n          role: \"model\",\n          parts: [\n            {\n              text: \"Do you have sore throat, hoarseness, or difficulty swallowing?\",\n            },\n          ],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"yes\" }],\n        },\n        {\n          role: \"model\",\n          parts: [{ text: \"Do you have fever, chills, or headache?\" }],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"no\" }],\n        },\n        {\n          role: \"model\",\n          parts: [{ text: \"Disease : Acute Sore throat\" }],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"skin rashes and burns\" }],\n        },\n        {\n          role: \"model\",\n          parts: [{ text: \"Are the skin rashes itchy, red, and raised?\" }],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"yes\" }],\n        },\n        {\n          role: \"model\",\n          parts: [\n            { text: \"Do you have any open wounds or blisters on your skin?\" },\n          ],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"yes\" }],\n        },\n        {\n          role: \"model\",\n          parts: [{ text: \"Disease : Skin infections\" }],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"hard stool\" }],\n        },\n        {\n          role: \"model\",\n          parts: [\n            { text: \"Is your stool hard and dry, or is it difficult to pass?\" },\n          ],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"yes\" }],\n        },\n        {\n          role: \"model\",\n          parts: [{ text: \"Disease : Constipation\" }],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"I feel weak and have bone pain\" }],\n        },\n        {\n          role: \"model\",\n          parts: [\n            { text: \"Have you experienced any recent falls or injuries?\" },\n          ],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"yes\" }],\n        },\n        {\n          role: \"model\",\n          parts: [{ text: \"Disease : Osteoporosis\" }],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"difficulty in breathing\" }],\n        },\n        {\n          role: \"model\",\n          parts: [\n            {\n              text: \"Do you have a persistent cough, wheezing, or shortness of breath?\",\n            },\n          ],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"yes\" }],\n        },\n        {\n          role: \"model\",\n          parts: [{ text: \"Disease : Asthma\" }],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"Cough\" }],\n        },\n        {\n          role: \"model\",\n          parts: [{ text: \"Is your cough dry or do you produce mucus?\" }],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"dry\" }],\n        },\n        {\n          role: \"model\",\n          parts: [\n            {\n              text: \"Do you have any other symptoms, such as a sore throat, runny nose, or headache?\",\n            },\n          ],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"no\" }],\n        },\n        {\n          role: \"model\",\n          parts: [{ text: \"Disease : Dry Cough\" }],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"stomach pain\" }],\n        },\n        {\n          role: \"model\",\n          parts: [\n            {\n              text: \"Is the pain located in your upper abdomen, lower abdomen, or both?\",\n            },\n          ],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"upper\" }],\n        },\n        {\n          role: \"model\",\n          parts: [\n            {\n              text: \"Do you experience the pain after eating certain foods or drinks?\",\n            },\n          ],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"no\" }],\n        },\n        {\n          role: \"model\",\n          parts: [{ text: \"Disease : Gastritis\" }],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"Depression , nerve pain\" }],\n        },\n        {\n          role: \"model\",\n          parts: [\n            {\n              text: \"Do you feel sadness, hopelessness, and loss of interest in activities that you once enjoyed?\",\n            },\n          ],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"no\" }],\n        },\n        {\n          role: \"model\",\n          parts: [{ text: \"Disease : Neuropathic pain\" }],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"fever\" }],\n        },\n        {\n          role: \"model\",\n          parts: [\n            { text: \"Do you have a headache, sore throat, or runny nose?\" },\n          ],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"runny nose\" }],\n        },\n        {\n          role: \"model\",\n          parts: [{ text: \"Disease : Common Cold\" }],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"Pain\" }],\n        },\n        {\n          role: \"model\",\n          parts: [{ text: \"Is the pain sharp, dull, or burning?\" }],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"sharp\" }],\n        },\n        {\n          role: \"model\",\n          parts: [{ text: \"Disease : Pain relief\" }],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"circular infection\" }],\n        },\n        {\n          role: \"model\",\n          parts: [\n            {\n              text: \"Is the infection on the skin, respiratory system, or urinary tract?\",\n            },\n          ],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"urinary tract\" }],\n        },\n        {\n          role: \"model\",\n          parts: [{ text: \"Disease : Urinary Tract Infection\" }],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"pain in the nail\" }],\n        },\n        {\n          role: \"model\",\n          parts: [{ text: \"Is the pain throbbing, sharp, or aching?\" }],\n        },\n        {\n          role: \"user\",\n          parts: [{ text: \"aching\" }],\n        },\n        {\n          role: \"model\",\n          parts: [{ text: \"Disease : Paronychia\" }],\n        },\n      ],\n    });\n    let count = 1;\n    while (!LLMDiagnosisEnds(llmresponse) || count < 5) {\n      console.log(\"Inside the LLM bot :: \", query);\n      let result = await chat.sendMessage(query);\n      var response = result.response;\n      response = response.text();\n      console.log(\"Inside the LLM Response : \", response);\n      handleLLMResponse(response);\n      //set the response\n      setLLMResponse(response);\n      count = count + 1;\n    }\n    //split the response on colon and take the second part\n    let dis = response.split(\":\")[1].trim();\n    let diagnosed_disease = `${symp} + ${dis}`;\n    recommender(diagnosed_disease);\n  }\n\n  const handleLLMResponse = (response) => {\n    //print the response on the Chat window\n    console.log(\"Inside the Handle LLM response...\");\n    message = createChatBotMessage(`${response}`, {\n      withAvatar: true,\n      delay: 250,\n    });\n    updateState(message, \"askllm\");\n  };\n\n  const userToLLM = (message) => {\n    console.log(\"Inside the UserToLLM part\");\n    setQuery(message);\n  };\n  function askquestions(quests, symptom) {\n    setQues(quests);\n    setSymp(symptom);\n    console.log(\"Insider ask :: \", quests[qno]);\n    message = createChatBotMessage(`${quests[qno].Qn}`, {\n      withAvatar: true,\n      delay: 250,\n    });\n    updateState(message, \"question\");\n  }\n  const handleQuestionResponse = (response) => {\n    // if the sentiment positive then pass the disease to the server and query else ask next question.\n    let positive_list = [\"yes\", \"yep\", \"yeah\"];\n    function containsAnyWord(string, positive_list) {\n      for (let word of positive_list) {\n        if (string.includes(word)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    if (containsAnyWord(response, positive_list)) {\n      let diagnosed_disease = `${symp} + ${ques[qno].disease}`;\n      console.log(diagnosed_disease);\n      recommender(diagnosed_disease);\n    } else if (qno + 1 < ques.length) {\n      setQno(qno + 1);\n      message = createChatBotMessage(`${ques[qno + 1].Qn}`, {\n        withAvatar: true,\n        delay: 250,\n      });\n      updateState(message, \"question\");\n    } else {\n      recommender(symp);\n    }\n  };\n  const recommender = async (symptom) => {\n    console.log(\"Sending the Symptom to the server\", symptom);\n\n    try {\n      const result = await axios.post(\"http://127.0.0.1:5000/data/\", {\n        payload: symptom,\n      });\n      setMedicines(result.data);\n      console.log(\"Recieved Response :: \", result.data);\n\n      message = createChatBotMessage(\n        `You have been diagnosed for ${result.data[\"Disease\"]} !`,\n        { withAvatar: true, delay: 500 }\n      );\n      updateState(message, \"default\");\n\n      message = createChatBotMessage(\n        `It would be the best if you consult  : ${result.data[\"Department\"]} !`,\n        { withAvatar: true, delay: 500 }\n      );\n      updateState(message, \"default\");\n\n      message = createChatBotMessage(\n        `You must be treated with medicines of Therapeutic Class : ${result.data[\"Therapeutic_Class\"]} !`,\n        { withAvatar: true, delay: 500 }\n      );\n      updateState(message, \"default\");\n\n      message = createChatBotMessage(\n        `Below listed are some of the recommended medicines..`,\n        { withAvatar: true, delay: 500 }\n      );\n      updateState(message, \"default\");\n\n      result.data[\"Medicine_Recommendation\"].map((med, i) => {\n        message = createChatBotMessage(`${i}. ${med}`, { delay: 500 });\n        updateState(message, \"default\");\n      });\n\n      // Only ask the id if the number of medicines is > 1\n      if (result.data[\"Medicine_Recommendation\"].length > 1) {\n        message = createChatBotMessage(\n          \"Enter the id of the Medicine That you would like to query about ?\",\n          { withAvatar: true, delay: 500 }\n        );\n        updateState(message, \"medid\");\n      } else {\n        setMed(result.data[\"Medicine_Recommendation\"][0]);\n\n        message = createChatBotMessage(\n          `Please Type in your query for the Medicine(${result.data[\"Medicine_Recommendation\"][0]}) !`,\n          { withAvatar: true, delay: 500 }\n        );\n        updateState(message, \"medquery\");\n      }\n    } catch (e) {\n      console.log(\"Error in Retrieving from Flask server....\");\n      console.log(e);\n    }\n  };\n  const querysymptom = async (symptom) => {\n    // here we migh have to the diagnosis process ... wherein we will be asking all types of questions.\n    let qclasses = [];\n    questions.map((ques) => {\n      qclasses.push(ques.CLASS);\n    });\n    let qcosine = [];\n    qclasses.forEach((txt) => {\n      qcosine.push(similarity(txt, symptom));\n    });\n    console.log(\"Cosine :: \", qcosine.indexOf(1));\n\n    //ask questions\n    if (qcosine.indexOf(1) !== -1) {\n      // set the symptom here only\n      askquestions(questions[qcosine.indexOf(1)].questions, symptom);\n    } else {\n      // pass it to the LLM diagnoser\n      setSymp(symptom);\n      setQuery(symptom);\n    //   runChat();\n      recommender(symptom);\n    }\n\n    // recommender(symptom);\n  };\n\n  const querymedication = (medid) => {\n    console.log(\"You have chosen the option :: \", medid);\n    console.log(\n      \"Medicine Chosen :: \",\n      medicines.Medicine_Recommendation.at(medid)\n    );\n    setMed(medicines.Medicine_Recommendation.at(medid));\n\n    message = createChatBotMessage(\n      `Please Type in your query for the Chosen Medicine(${medicines.Medicine_Recommendation.at(\n        medid\n      )}) !`,\n      { withAvatar: true, delay: 500 }\n    );\n    updateState(message, \"medquery\");\n  };\n  const processquery = async (inpquery) => {\n    // we will be passing the medicine name and the query to the server ... which will use langchain to create a cypher query and then would return us the result\n    try {\n      const result = await axios.post(\"http://127.0.0.1:5000/medquery/\", {\n        query: inpquery,\n        medicine: med,\n      });\n      console.log(\"Result From API :: \", result.data);\n      message = createChatBotMessage(`${result.data.Result}`, {\n        withAvatar: true,\n      });\n      updateState(message, \"medquery\");\n    } catch (e) {\n      console.log(\"Problem in querying the medicine \", e);\n    }\n\n    message = createChatBotMessage(\n      `Any more queries for the Chosen Medicine(${med}) !`,\n      { withAvatar: false, delay: 500 }\n    );\n    updateState(message, \"medquery\");\n  };\n\n  const updateState = (message, checker) => {\n    setState((prev) => ({\n      ...prev,\n      messages: [...prev.messages, message],\n      checker,\n    }));\n  };\n  return (\n    <div>\n      {React.Children.map(children, (child) => {\n        return React.cloneElement(child, {\n          actions: {\n            querysymptom,\n            querymedication,\n            processquery,\n            handleQuestionResponse,\n            recommender,\n            userToLLM,\n          },\n        });\n      })}\n    </div>\n  );\n};\n\nexport default ActionProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}