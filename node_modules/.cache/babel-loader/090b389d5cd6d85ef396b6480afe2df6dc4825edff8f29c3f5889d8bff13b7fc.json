{"ast":null,"code":"var _jsxFileName = \"/Users/vinaymoolya/Desktop/projects/medicineai/src/chatbot/ActionProvider.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport questions from \"../questions.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ActionProvider = ({\n  createChatBotMessage,\n  setState,\n  children\n}) => {\n  _s();\n  const [medicines, setMedicines] = useState({});\n  const [med, setMed] = useState(\"\");\n  const [ques, setQues] = useState([]);\n  let message;\n  let similarity = require(\"string-cosine-similarity\");\n\n  //   const diagnoseclass = async (symptom) => {\n  //     console.log(\"Diagnosis Module...\");\n  //     try {\n  //       const result = await axios.post(\"http://127.0.0.1:5000/diagnose/\", {\n  //         payload: symptom,\n  //       });\n  //       console.log(\"Diagnosis Module Recieved Response :: \", result.data);\n  //       // now we need to pass this to question asking function\n  //       // nowe we directly communicate to the askquestion endpoint\n\n  //       const response = await axios.post(\"http://127.0.0.1:5000/askquestion/\", {\n  //         class: result.data.class,\n  //         disease: symptom,\n  //         response: \"init\",\n  //       });\n\n  //       // create a chatbot message and set the checker\n\n  //       console.log(\"Data from Question Asking MOdule :\", response.data);\n  //     } catch (e) {\n  //       console.log(\"There is some error in the diagnosis phase...\");\n  //     }\n  //   };\n  //   //   const askquestions = async (response) => {\n  //   //     console.log(\"Question Asking Module...\")\n  //   //     try{\n  //   //         const result = await axios.post(\"\",{\n  //   //         })\n  //   //     }\n  //   //   };\n  const querysymptom = async symptom => {\n    // here we migh have to the diagnosis process ... wherein we will be asking all types of questions.\n    let qclasses = [];\n    questions.map(ques => {\n      qclasses.push(ques.CLASS);\n    });\n    let qcosine = [];\n    qclasses.forEach(txt => {\n      qcosine.push(similarity(txt, symptom));\n    });\n    console.log(\"Cosine :: \", qcosine.indexOf(1));\n    console.log(questions[qcosine.indexOf(1)].questions);\n    setQues(questions[qcosine.indexOf(1)].questions);\n    disease = askquestions(sympt);\n    console.log(\"Sending the Symptom to the server\", symptom);\n    try {\n      const result = await axios.post(\"http://127.0.0.1:5000/data/\", {\n        payload: symptom\n      });\n      setMedicines(result.data);\n      console.log(\"Recieved Response :: \", result.data[\"Medicine_Recommendation\"].length);\n      message = createChatBotMessage(`You have been diagnosed for ${result.data[\"Disease\"]} !`, {\n        withAvatar: true,\n        delay: 500\n      });\n      updateState(message, \"default\");\n      message = createChatBotMessage(`Below listed are some of the recommended medicines..`, {\n        withAvatar: true,\n        delay: 500\n      });\n      updateState(message, \"default\");\n      result.data[\"Medicine_Recommendation\"].map((med, i) => {\n        message = createChatBotMessage(`${i}. ${med}`, {\n          delay: 500\n        });\n        updateState(message, \"default\");\n      });\n      message = createChatBotMessage(\"Enter the id of the Medicine That you would like to query about ?\", {\n        withAvatar: true,\n        delay: 500\n      });\n      updateState(message, \"medid\");\n    } catch (e) {\n      console.log(\"Error in Retrieving from Flask server....\");\n      console.log(e);\n    }\n  };\n  const querymedication = medid => {\n    console.log(\"You have chosen the option :: \", medid);\n    console.log(\"Medicine Chosen :: \", medicines.Medicine_Recommendation.at(medid));\n    setMed(medicines.Medicine_Recommendation.at(medid));\n    message = createChatBotMessage(`Please Type in your query for the Chosen Medicine(${medicines.Medicine_Recommendation.at(medid)}) !`, {\n      withAvatar: true,\n      delay: 500\n    });\n    updateState(message, \"medquery\");\n  };\n  const processquery = async inpquery => {\n    // we will be passing the medicine name and the query to the server ... which will use langchain to create a cypher query and then would return us the result\n    try {\n      const result = await axios.post(\"http://127.0.0.1:5000/medquery/\", {\n        query: inpquery,\n        medicine: med\n      });\n      console.log(\"Result From API :: \", result.data);\n      message = createChatBotMessage(`${result.data.Result}`, {\n        withAvatar: true\n      });\n      updateState(message, \"medquery\");\n    } catch (e) {\n      console.log(\"Problem in querying the medicine \", e);\n    }\n    message = createChatBotMessage(`Any more queries for the Chosen Medicine(${med}) !`, {\n      withAvatar: false,\n      delay: 500\n    });\n    updateState(message, \"medquery\");\n  };\n  const updateState = (message, checker) => {\n    setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, message],\n      checker\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: React.Children.map(children, child => {\n      return /*#__PURE__*/React.cloneElement(child, {\n        actions: {\n          querysymptom,\n          querymedication,\n          processquery\n        }\n      });\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s(ActionProvider, \"hLK221vf4r8pzXIL6OXc0oDKY9M=\");\n_c = ActionProvider;\nexport default ActionProvider;\nvar _c;\n$RefreshReg$(_c, \"ActionProvider\");","map":{"version":3,"names":["React","useState","axios","questions","jsxDEV","_jsxDEV","ActionProvider","createChatBotMessage","setState","children","_s","medicines","setMedicines","med","setMed","ques","setQues","message","similarity","require","querysymptom","symptom","qclasses","map","push","CLASS","qcosine","forEach","txt","console","log","indexOf","disease","askquestions","sympt","result","post","payload","data","length","withAvatar","delay","updateState","i","e","querymedication","medid","Medicine_Recommendation","at","processquery","inpquery","query","medicine","Result","checker","prev","messages","Children","child","cloneElement","actions","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vinaymoolya/Desktop/projects/medicineai/src/chatbot/ActionProvider.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport questions from \"../questions.json\";\nconst ActionProvider = ({ createChatBotMessage, setState, children }) => {\n  const [medicines, setMedicines] = useState({});\n  const [med, setMed] = useState(\"\");\n  const [ques, setQues] = useState([]);\n  let message;\n  let similarity = require(\"string-cosine-similarity\");\n\n  //   const diagnoseclass = async (symptom) => {\n  //     console.log(\"Diagnosis Module...\");\n  //     try {\n  //       const result = await axios.post(\"http://127.0.0.1:5000/diagnose/\", {\n  //         payload: symptom,\n  //       });\n  //       console.log(\"Diagnosis Module Recieved Response :: \", result.data);\n  //       // now we need to pass this to question asking function\n  //       // nowe we directly communicate to the askquestion endpoint\n\n  //       const response = await axios.post(\"http://127.0.0.1:5000/askquestion/\", {\n  //         class: result.data.class,\n  //         disease: symptom,\n  //         response: \"init\",\n  //       });\n\n  //       // create a chatbot message and set the checker\n\n  //       console.log(\"Data from Question Asking MOdule :\", response.data);\n  //     } catch (e) {\n  //       console.log(\"There is some error in the diagnosis phase...\");\n  //     }\n  //   };\n  //   //   const askquestions = async (response) => {\n  //   //     console.log(\"Question Asking Module...\")\n  //   //     try{\n  //   //         const result = await axios.post(\"\",{\n  //   //         })\n  //   //     }\n  //   //   };\n  const querysymptom = async (symptom) => {\n    // here we migh have to the diagnosis process ... wherein we will be asking all types of questions.\n    let qclasses = [];\n    questions.map((ques) => {\n      qclasses.push(ques.CLASS);\n    });\n    let qcosine = [];\n    qclasses.forEach((txt) => {\n      qcosine.push(similarity(txt, symptom));\n    });\n    console.log(\"Cosine :: \", qcosine.indexOf(1));\n\n    console.log(questions[qcosine.indexOf(1)].questions);\n\n    setQues(questions[qcosine.indexOf(1)].questions);\n\n    disease = askquestions(sympt)\n\n    console.log(\"Sending the Symptom to the server\", symptom);\n\n    try {\n      const result = await axios.post(\"http://127.0.0.1:5000/data/\", {\n        payload: symptom,\n      });\n      setMedicines(result.data);\n      console.log(\n        \"Recieved Response :: \",\n        result.data[\"Medicine_Recommendation\"].length\n      );\n\n      message = createChatBotMessage(\n        `You have been diagnosed for ${result.data[\"Disease\"]} !`,\n        { withAvatar: true, delay: 500 }\n      );\n      updateState(message, \"default\");\n\n      message = createChatBotMessage(\n        `Below listed are some of the recommended medicines..`,\n        { withAvatar: true, delay: 500 }\n      );\n      updateState(message, \"default\");\n\n      result.data[\"Medicine_Recommendation\"].map((med, i) => {\n        message = createChatBotMessage(`${i}. ${med}`, { delay: 500 });\n        updateState(message, \"default\");\n      });\n\n      message = createChatBotMessage(\n        \"Enter the id of the Medicine That you would like to query about ?\",\n        { withAvatar: true, delay: 500 }\n      );\n      updateState(message, \"medid\");\n    } catch (e) {\n      console.log(\"Error in Retrieving from Flask server....\");\n      console.log(e);\n    }\n  };\n\n  const querymedication = (medid) => {\n    console.log(\"You have chosen the option :: \", medid);\n    console.log(\n      \"Medicine Chosen :: \",\n      medicines.Medicine_Recommendation.at(medid)\n    );\n    setMed(medicines.Medicine_Recommendation.at(medid));\n\n    message = createChatBotMessage(\n      `Please Type in your query for the Chosen Medicine(${medicines.Medicine_Recommendation.at(\n        medid\n      )}) !`,\n      { withAvatar: true, delay: 500 }\n    );\n    updateState(message, \"medquery\");\n  };\n  const processquery = async (inpquery) => {\n    // we will be passing the medicine name and the query to the server ... which will use langchain to create a cypher query and then would return us the result\n    try {\n      const result = await axios.post(\"http://127.0.0.1:5000/medquery/\", {\n        query: inpquery,\n        medicine: med,\n      });\n      console.log(\"Result From API :: \", result.data);\n      message = createChatBotMessage(`${result.data.Result}`, {\n        withAvatar: true,\n      });\n      updateState(message, \"medquery\");\n    } catch (e) {\n      console.log(\"Problem in querying the medicine \", e);\n    }\n\n    message = createChatBotMessage(\n      `Any more queries for the Chosen Medicine(${med}) !`,\n      { withAvatar: false, delay: 500 }\n    );\n    updateState(message, \"medquery\");\n  };\n\n  const updateState = (message, checker) => {\n    setState((prev) => ({\n      ...prev,\n      messages: [...prev.messages, message],\n      checker,\n    }));\n  };\n  return (\n    <div>\n      {React.Children.map(children, (child) => {\n        return React.cloneElement(child, {\n          actions: {\n            querysymptom,\n            querymedication,\n            processquery,\n          },\n        });\n      })}\n    </div>\n  );\n};\n\nexport default ActionProvider;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1C,MAAMC,cAAc,GAAGA,CAAC;EAAEC,oBAAoB;EAAEC,QAAQ;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACvE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACY,GAAG,EAAEC,MAAM,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM,CAACc,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACpC,IAAIgB,OAAO;EACX,IAAIC,UAAU,GAAGC,OAAO,CAAC,0BAA0B,CAAC;;EAEpD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,YAAY,GAAG,MAAOC,OAAO,IAAK;IACtC;IACA,IAAIC,QAAQ,GAAG,EAAE;IACjBnB,SAAS,CAACoB,GAAG,CAAER,IAAI,IAAK;MACtBO,QAAQ,CAACE,IAAI,CAACT,IAAI,CAACU,KAAK,CAAC;IAC3B,CAAC,CAAC;IACF,IAAIC,OAAO,GAAG,EAAE;IAChBJ,QAAQ,CAACK,OAAO,CAAEC,GAAG,IAAK;MACxBF,OAAO,CAACF,IAAI,CAACN,UAAU,CAACU,GAAG,EAAEP,OAAO,CAAC,CAAC;IACxC,CAAC,CAAC;IACFQ,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEJ,OAAO,CAACK,OAAO,CAAC,CAAC,CAAC,CAAC;IAE7CF,OAAO,CAACC,GAAG,CAAC3B,SAAS,CAACuB,OAAO,CAACK,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC5B,SAAS,CAAC;IAEpDa,OAAO,CAACb,SAAS,CAACuB,OAAO,CAACK,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC5B,SAAS,CAAC;IAEhD6B,OAAO,GAAGC,YAAY,CAACC,KAAK,CAAC;IAE7BL,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAET,OAAO,CAAC;IAEzD,IAAI;MACF,MAAMc,MAAM,GAAG,MAAMjC,KAAK,CAACkC,IAAI,CAAC,6BAA6B,EAAE;QAC7DC,OAAO,EAAEhB;MACX,CAAC,CAAC;MACFT,YAAY,CAACuB,MAAM,CAACG,IAAI,CAAC;MACzBT,OAAO,CAACC,GAAG,CACT,uBAAuB,EACvBK,MAAM,CAACG,IAAI,CAAC,yBAAyB,CAAC,CAACC,MACzC,CAAC;MAEDtB,OAAO,GAAGV,oBAAoB,CAC3B,+BAA8B4B,MAAM,CAACG,IAAI,CAAC,SAAS,CAAE,IAAG,EACzD;QAAEE,UAAU,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAI,CACjC,CAAC;MACDC,WAAW,CAACzB,OAAO,EAAE,SAAS,CAAC;MAE/BA,OAAO,GAAGV,oBAAoB,CAC3B,sDAAqD,EACtD;QAAEiC,UAAU,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAI,CACjC,CAAC;MACDC,WAAW,CAACzB,OAAO,EAAE,SAAS,CAAC;MAE/BkB,MAAM,CAACG,IAAI,CAAC,yBAAyB,CAAC,CAACf,GAAG,CAAC,CAACV,GAAG,EAAE8B,CAAC,KAAK;QACrD1B,OAAO,GAAGV,oBAAoB,CAAE,GAAEoC,CAAE,KAAI9B,GAAI,EAAC,EAAE;UAAE4B,KAAK,EAAE;QAAI,CAAC,CAAC;QAC9DC,WAAW,CAACzB,OAAO,EAAE,SAAS,CAAC;MACjC,CAAC,CAAC;MAEFA,OAAO,GAAGV,oBAAoB,CAC5B,mEAAmE,EACnE;QAAEiC,UAAU,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAI,CACjC,CAAC;MACDC,WAAW,CAACzB,OAAO,EAAE,OAAO,CAAC;IAC/B,CAAC,CAAC,OAAO2B,CAAC,EAAE;MACVf,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;MACxDD,OAAO,CAACC,GAAG,CAACc,CAAC,CAAC;IAChB;EACF,CAAC;EAED,MAAMC,eAAe,GAAIC,KAAK,IAAK;IACjCjB,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEgB,KAAK,CAAC;IACpDjB,OAAO,CAACC,GAAG,CACT,qBAAqB,EACrBnB,SAAS,CAACoC,uBAAuB,CAACC,EAAE,CAACF,KAAK,CAC5C,CAAC;IACDhC,MAAM,CAACH,SAAS,CAACoC,uBAAuB,CAACC,EAAE,CAACF,KAAK,CAAC,CAAC;IAEnD7B,OAAO,GAAGV,oBAAoB,CAC3B,qDAAoDI,SAAS,CAACoC,uBAAuB,CAACC,EAAE,CACvFF,KACF,CAAE,KAAI,EACN;MAAEN,UAAU,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAI,CACjC,CAAC;IACDC,WAAW,CAACzB,OAAO,EAAE,UAAU,CAAC;EAClC,CAAC;EACD,MAAMgC,YAAY,GAAG,MAAOC,QAAQ,IAAK;IACvC;IACA,IAAI;MACF,MAAMf,MAAM,GAAG,MAAMjC,KAAK,CAACkC,IAAI,CAAC,iCAAiC,EAAE;QACjEe,KAAK,EAAED,QAAQ;QACfE,QAAQ,EAAEvC;MACZ,CAAC,CAAC;MACFgB,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEK,MAAM,CAACG,IAAI,CAAC;MAC/CrB,OAAO,GAAGV,oBAAoB,CAAE,GAAE4B,MAAM,CAACG,IAAI,CAACe,MAAO,EAAC,EAAE;QACtDb,UAAU,EAAE;MACd,CAAC,CAAC;MACFE,WAAW,CAACzB,OAAO,EAAE,UAAU,CAAC;IAClC,CAAC,CAAC,OAAO2B,CAAC,EAAE;MACVf,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEc,CAAC,CAAC;IACrD;IAEA3B,OAAO,GAAGV,oBAAoB,CAC3B,4CAA2CM,GAAI,KAAI,EACpD;MAAE2B,UAAU,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAI,CAClC,CAAC;IACDC,WAAW,CAACzB,OAAO,EAAE,UAAU,CAAC;EAClC,CAAC;EAED,MAAMyB,WAAW,GAAGA,CAACzB,OAAO,EAAEqC,OAAO,KAAK;IACxC9C,QAAQ,CAAE+C,IAAI,KAAM;MAClB,GAAGA,IAAI;MACPC,QAAQ,EAAE,CAAC,GAAGD,IAAI,CAACC,QAAQ,EAAEvC,OAAO,CAAC;MACrCqC;IACF,CAAC,CAAC,CAAC;EACL,CAAC;EACD,oBACEjD,OAAA;IAAAI,QAAA,EACGT,KAAK,CAACyD,QAAQ,CAAClC,GAAG,CAACd,QAAQ,EAAGiD,KAAK,IAAK;MACvC,oBAAO1D,KAAK,CAAC2D,YAAY,CAACD,KAAK,EAAE;QAC/BE,OAAO,EAAE;UACPxC,YAAY;UACZyB,eAAe;UACfI;QACF;MACF,CAAC,CAAC;IACJ,CAAC;EAAC;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACtD,EAAA,CA1JIJ,cAAc;AAAA2D,EAAA,GAAd3D,cAAc;AA4JpB,eAAeA,cAAc;AAAC,IAAA2D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}