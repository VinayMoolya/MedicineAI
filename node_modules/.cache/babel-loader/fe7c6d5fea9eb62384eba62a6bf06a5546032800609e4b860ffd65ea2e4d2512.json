{"ast":null,"code":"var _jsxFileName = \"/Users/vinaymoolya/Desktop/projects/medicineai/src/chatbot/ActionProvider.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport questions from \"../questions.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ActionProvider = ({\n  createChatBotMessage,\n  setState,\n  children\n}) => {\n  _s();\n  const [medicines, setMedicines] = useState({});\n  const [med, setMed] = useState(\"\");\n  const [ques, setQues, getQues] = useState([]);\n  const [symp, setSymp, getSymp] = useState(\"\");\n  const [qno, setQno, getQno] = useState(0);\n  let message;\n  let similarity = require(\"string-cosine-similarity\");\n\n  //   const diagnoseclass = async (symptom) => {\n  //     console.log(\"Diagnosis Module...\");\n  //     try {\n  //       const result = await axios.post(\"http://127.0.0.1:5000/diagnose/\", {\n  //         payload: symptom,\n  //       });\n  //       console.log(\"Diagnosis Module Recieved Response :: \", result.data);\n  //       // now we need to pass this to question asking function\n  //       // nowe we directly communicate to the askquestion endpoint\n\n  //       const response = await axios.post(\"http://127.0.0.1:5000/askquestion/\", {\n  //         class: result.data.class,\n  //         disease: symptom,\n  //         response: \"init\",\n  //       });\n\n  //       // create a chatbot message and set the checker\n\n  //       console.log(\"Data from Question Asking MOdule :\", response.data);\n  //     } catch (e) {\n  //       console.log(\"There is some error in the diagnosis phase...\");\n  //     }\n  //   };\n  //   //   const askquestions = async (response) => {\n  //   //     console.log(\"Question Asking Module...\")\n  //   //     try{\n  //   //         const result = await axios.post(\"\",{\n  //   //         })\n  //   //     }\n  //   //   };\n  function askquestions(quests, symptom) {\n    setQues(quests);\n    setSymp(symptom);\n    message = createChatBotMessage(`${ques[qno]}`, {\n      withAvatar: true,\n      delay: 250\n    });\n    updateState(message, \"question\");\n    setQno(qno + 1);\n  }\n  const handleQuestionResponse = response => {\n    // if the sentiment positive then pass the disease to the server and query else ask next question.\n  };\n  const recommender = async symptom => {\n    console.log(\"Sending the Symptom to the server\", symptom);\n    try {\n      const result = await axios.post(\"http://127.0.0.1:5000/data/\", {\n        payload: symptom\n      });\n      setMedicines(result.data);\n      console.log(\"Recieved Response :: \", result.data[\"Medicine_Recommendation\"].length);\n      message = createChatBotMessage(`You have been diagnosed for ${result.data[\"Disease\"]} !`, {\n        withAvatar: true,\n        delay: 500\n      });\n      updateState(message, \"default\");\n      message = createChatBotMessage(`Below listed are some of the recommended medicines..`, {\n        withAvatar: true,\n        delay: 500\n      });\n      updateState(message, \"default\");\n      result.data[\"Medicine_Recommendation\"].map((med, i) => {\n        message = createChatBotMessage(`${i}. ${med}`, {\n          delay: 500\n        });\n        updateState(message, \"default\");\n      });\n      message = createChatBotMessage(\"Enter the id of the Medicine That you would like to query about ?\", {\n        withAvatar: true,\n        delay: 500\n      });\n      updateState(message, \"medid\");\n    } catch (e) {\n      console.log(\"Error in Retrieving from Flask server....\");\n      console.log(e);\n    }\n  };\n  const querysymptom = async symptom => {\n    // here we migh have to the diagnosis process ... wherein we will be asking all types of questions.\n    let qclasses = [];\n    questions.map(ques => {\n      qclasses.push(ques.CLASS);\n    });\n    let qcosine = [];\n    qclasses.forEach(txt => {\n      qcosine.push(similarity(txt, symptom));\n    });\n    console.log(\"Cosine :: \", qcosine.indexOf(1));\n    console.log(questions[qcosine.indexOf(1)].questions);\n\n    //ask questions\n    let question = (await getQues())[await getQno()];\n    message = createChatBotMessage(`${question}`, {\n      withAvatar: true,\n      delay: 250\n    });\n    updateState(message, \"question\");\n    askquestions(questions[qcosine.indexOf(1)].questions, symptom);\n    // recommender(symptom);\n  };\n  const querymedication = medid => {\n    console.log(\"You have chosen the option :: \", medid);\n    console.log(\"Medicine Chosen :: \", medicines.Medicine_Recommendation.at(medid));\n    setMed(medicines.Medicine_Recommendation.at(medid));\n    message = createChatBotMessage(`Please Type in your query for the Chosen Medicine(${medicines.Medicine_Recommendation.at(medid)}) !`, {\n      withAvatar: true,\n      delay: 500\n    });\n    updateState(message, \"medquery\");\n  };\n  const processquery = async inpquery => {\n    // we will be passing the medicine name and the query to the server ... which will use langchain to create a cypher query and then would return us the result\n    try {\n      const result = await axios.post(\"http://127.0.0.1:5000/medquery/\", {\n        query: inpquery,\n        medicine: med\n      });\n      console.log(\"Result From API :: \", result.data);\n      message = createChatBotMessage(`${result.data.Result}`, {\n        withAvatar: true\n      });\n      updateState(message, \"medquery\");\n    } catch (e) {\n      console.log(\"Problem in querying the medicine \", e);\n    }\n    message = createChatBotMessage(`Any more queries for the Chosen Medicine(${med}) !`, {\n      withAvatar: false,\n      delay: 500\n    });\n    updateState(message, \"medquery\");\n  };\n  const updateState = (message, checker) => {\n    setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, message],\n      checker\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: React.Children.map(children, child => {\n      return /*#__PURE__*/React.cloneElement(child, {\n        actions: {\n          querysymptom,\n          querymedication,\n          processquery,\n          handleQuestionResponse,\n          recommender\n        }\n      });\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n};\n_s(ActionProvider, \"AVxONz0tVw4w6FTLErO4RN1ht/c=\");\n_c = ActionProvider;\nexport default ActionProvider;\nvar _c;\n$RefreshReg$(_c, \"ActionProvider\");","map":{"version":3,"names":["React","useEffect","useState","axios","questions","jsxDEV","_jsxDEV","ActionProvider","createChatBotMessage","setState","children","_s","medicines","setMedicines","med","setMed","ques","setQues","getQues","symp","setSymp","getSymp","qno","setQno","getQno","message","similarity","require","askquestions","quests","symptom","withAvatar","delay","updateState","handleQuestionResponse","response","recommender","console","log","result","post","payload","data","length","map","i","e","querysymptom","qclasses","push","CLASS","qcosine","forEach","txt","indexOf","question","querymedication","medid","Medicine_Recommendation","at","processquery","inpquery","query","medicine","Result","checker","prev","messages","Children","child","cloneElement","actions","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vinaymoolya/Desktop/projects/medicineai/src/chatbot/ActionProvider.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport questions from \"../questions.json\";\n\nconst ActionProvider = ({ createChatBotMessage, setState, children }) => {\n  const [medicines, setMedicines] = useState({});\n  const [med, setMed] = useState(\"\");\n  const [ques, setQues, getQues] = useState([]);\n  const [symp, setSymp, getSymp] = useState(\"\");\n  const [qno, setQno, getQno] = useState(0);\n  let message;\n  let similarity = require(\"string-cosine-similarity\");\n\n  //   const diagnoseclass = async (symptom) => {\n  //     console.log(\"Diagnosis Module...\");\n  //     try {\n  //       const result = await axios.post(\"http://127.0.0.1:5000/diagnose/\", {\n  //         payload: symptom,\n  //       });\n  //       console.log(\"Diagnosis Module Recieved Response :: \", result.data);\n  //       // now we need to pass this to question asking function\n  //       // nowe we directly communicate to the askquestion endpoint\n\n  //       const response = await axios.post(\"http://127.0.0.1:5000/askquestion/\", {\n  //         class: result.data.class,\n  //         disease: symptom,\n  //         response: \"init\",\n  //       });\n\n  //       // create a chatbot message and set the checker\n\n  //       console.log(\"Data from Question Asking MOdule :\", response.data);\n  //     } catch (e) {\n  //       console.log(\"There is some error in the diagnosis phase...\");\n  //     }\n  //   };\n  //   //   const askquestions = async (response) => {\n  //   //     console.log(\"Question Asking Module...\")\n  //   //     try{\n  //   //         const result = await axios.post(\"\",{\n  //   //         })\n  //   //     }\n  //   //   };\n  function askquestions(quests , symptom) {\n    setQues(quests);\n    setSymp(symptom);\n    message = createChatBotMessage(`${ques[qno]}`, {\n      withAvatar: true,\n      delay: 250,\n    });\n    updateState(message, \"question\");\n    setQno(qno + 1);\n  }\n  const handleQuestionResponse = (response) => {\n    // if the sentiment positive then pass the disease to the server and query else ask next question.\n  };\n  const recommender = async (symptom) => {\n    console.log(\"Sending the Symptom to the server\", symptom);\n\n    try {\n      const result = await axios.post(\"http://127.0.0.1:5000/data/\", {\n        payload: symptom,\n      });\n      setMedicines(result.data);\n      console.log(\n        \"Recieved Response :: \",\n        result.data[\"Medicine_Recommendation\"].length\n      );\n\n      message = createChatBotMessage(\n        `You have been diagnosed for ${result.data[\"Disease\"]} !`,\n        { withAvatar: true, delay: 500 }\n      );\n      updateState(message, \"default\");\n\n      message = createChatBotMessage(\n        `Below listed are some of the recommended medicines..`,\n        { withAvatar: true, delay: 500 }\n      );\n      updateState(message, \"default\");\n\n      result.data[\"Medicine_Recommendation\"].map((med, i) => {\n        message = createChatBotMessage(`${i}. ${med}`, { delay: 500 });\n        updateState(message, \"default\");\n      });\n\n      message = createChatBotMessage(\n        \"Enter the id of the Medicine That you would like to query about ?\",\n        { withAvatar: true, delay: 500 }\n      );\n      updateState(message, \"medid\");\n    } catch (e) {\n      console.log(\"Error in Retrieving from Flask server....\");\n      console.log(e);\n    }\n  };\n  const querysymptom = async (symptom) => {\n    // here we migh have to the diagnosis process ... wherein we will be asking all types of questions.\n    let qclasses = [];\n    questions.map((ques) => {\n      qclasses.push(ques.CLASS);\n    });\n    let qcosine = [];\n    qclasses.forEach((txt) => {\n      qcosine.push(similarity(txt, symptom));\n    });\n    console.log(\"Cosine :: \", qcosine.indexOf(1));\n\n    console.log(questions[qcosine.indexOf(1)].questions);\n\n    //ask questions\n    let question = (await getQues())[await getQno()];\n    message = createChatBotMessage(`${question}`, {\n      withAvatar: true,\n      delay: 250,\n    });\n    updateState(message, \"question\");\n\n    askquestions(questions[qcosine.indexOf(1)].questions, symptom);\n    // recommender(symptom);\n  };\n\n  const querymedication = (medid) => {\n    console.log(\"You have chosen the option :: \", medid);\n    console.log(\n      \"Medicine Chosen :: \",\n      medicines.Medicine_Recommendation.at(medid)\n    );\n    setMed(medicines.Medicine_Recommendation.at(medid));\n\n    message = createChatBotMessage(\n      `Please Type in your query for the Chosen Medicine(${medicines.Medicine_Recommendation.at(\n        medid\n      )}) !`,\n      { withAvatar: true, delay: 500 }\n    );\n    updateState(message, \"medquery\");\n  };\n  const processquery = async (inpquery) => {\n    // we will be passing the medicine name and the query to the server ... which will use langchain to create a cypher query and then would return us the result\n    try {\n      const result = await axios.post(\"http://127.0.0.1:5000/medquery/\", {\n        query: inpquery,\n        medicine: med,\n      });\n      console.log(\"Result From API :: \", result.data);\n      message = createChatBotMessage(`${result.data.Result}`, {\n        withAvatar: true,\n      });\n      updateState(message, \"medquery\");\n    } catch (e) {\n      console.log(\"Problem in querying the medicine \", e);\n    }\n\n    message = createChatBotMessage(\n      `Any more queries for the Chosen Medicine(${med}) !`,\n      { withAvatar: false, delay: 500 }\n    );\n    updateState(message, \"medquery\");\n  };\n\n  const updateState = (message, checker) => {\n    setState((prev) => ({\n      ...prev,\n      messages: [...prev.messages, message],\n      checker,\n    }));\n  };\n  return (\n    <div>\n      {React.Children.map(children, (child) => {\n        return React.cloneElement(child, {\n          actions: {\n            querysymptom,\n            querymedication,\n            processquery,\n            handleQuestionResponse,\n            recommender,\n          },\n        });\n      })}\n    </div>\n  );\n};\n\nexport default ActionProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}